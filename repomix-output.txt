This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
docker-compose.yml
docs/auth-service.md
pom.xml
services/auth-service/.gitattributes
services/auth-service/.gitignore
services/auth-service/.mvn/wrapper/maven-wrapper.properties
services/auth-service/mvnw
services/auth-service/mvnw.cmd
services/auth-service/pom.xml
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/AuthServiceApplication.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/MailStatus.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/MailType.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/OperatorFilter.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/TokenType.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/UserStatus.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/MyUtils.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/Translator.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/AuditorAwareConfig.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/CustomJwtDecoder.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/LocalResolver.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/SecurityConfig.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/controllers/AuthController.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/controllers/UserController.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthenticationRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthLogoutRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthRefreshTokenRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/FilterRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserChangePasswordRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserForgotPasswordRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserRegisterRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserResetPasswordRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/ErrorResponseDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/PageResponseDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/SuccessResponseDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/TokenResponseDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/UserResponseDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/BaseEntity.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/InvalidatedTokenEntity.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/MailEntity.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/UserEntity.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/DateFormatException.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/DuplicateResourceException.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/FilterDataException.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/GlobalExceptionHandler.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/ResourceNotFoundException.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/UnauthorizedException.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/mappers/UserMapper.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/InvalidatedTokenRepository.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/MailRepository.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/UserRepository.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/AuthService.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/AuthServiceImpl.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/JwtServiceImpl.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/UserServiceImpl.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/JwtService.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/MailService.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/UserService.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/specifications/UserSpecification.java
services/auth-service/src/main/resources/application.yml
services/auth-service/src/main/resources/banner.txt
services/auth-service/src/main/resources/messages_vi.properties
services/auth-service/src/main/resources/messages.properties
services/auth-service/src/test/java/dev/edu/ngochandev/authservice/AuthServiceApplicationTests.java

================================================================
Files
================================================================

================
File: .gitignore
================
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### IntelliJ IDEA ###
.idea/
*.iws
*.iml
*.ipr

### Eclipse ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

### Mac OS ###
.DS_Store

#env
env/
data/

================
File: docker-compose.yml
================
services:
  auth-db:
    image: postgres:16
    container_name: auth-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./data/auth:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth-network


networks:
  auth-network:
    driver: bridge

================
File: docs/auth-service.md
================
## 1 vài điểm cần lưu ý
- Tầng service chỉ nên gọi tầng repository của chính nó và cùng domain, không nên gọi tầng repository của domain khác.
- password không nên được lưu trữ trong database, thay vào đó nên sử dụng hash để mã hóa password.

## Các chức năng của auth-service
- Trả về danh sách người dùng
- Đăng ký người dùng mới và Xác thực người dùng
- Thay đổi mật khẩu và quên mật khẩu
- Phân quyền người dùng

## mẫu data response

```json
{
  "status": 200,
  "message": "user created successfully",
  "data": {
    "id": 123,
    "username": "john_doe",
    "email": "admin@gmail.com"
  }
}
```

## kiến trúc của spring security
![img.png](img.png)

## Các API của auth-service
### 1. Đăng ký người dùng mới ☑️
**POST** `/api/auth/register`

### 2. Xác thực người dùng ☑️
**POST** `/api/auth/login`

### 3. Làm mới token
**POST** `/api/auth/refresh-token` ☑️

### 4. Thay đổi mật khẩu
**POST** `/api/auth/change-password` ☑️

### 5. Quên mật khẩu
**POST** `/api/auth/forgot-password` -> gửi email chứa link reset password  
**POST** `/api/auth/reset-password` -> reset password

### 6. Trả về danh sách người dùng

**POST** `/api/v1/users/list` ☑️
#### Request body
```json
{
  "filters": [
    {
      "field": "username",
      "operator": "eq",
      "value": "123"
    },
    {
      "field": "age",
      "operator": "between",
      "value": [18, 65]
    },
    {
      "field": "status",
      "operator": "in",
      "value": ["ACTIVE", "PENDING"]
    }
  ],
  "sort": "id:DESC",
  "search": "ad",
  "page": 1,
  "size": 10
}
```
#### Response body

```json
{
  "status": 200,
  "message": "success",
  "data": {
    "items": [
      {
        "id": 1,
        "username": "john_doe",
        "email": "123@gmail.com",
        "status": "ACTIVE",
        "createdAt": "2023-01-01T00:00:00Z",
        "updatedAt": "2023-01-01T00:00:00Z"
      }
    ],
    "currentPage": 1,
    "totalElements": 100,
    "totalPages": 10
  }
}
```
### 7. Khôi phục password
<p align="center">
  <img src="img_1.png" alt="Sơ đồ luồng tổng quan" height="303" width="321" title="Sơ đồ luồng tổng quan">
</p>

#### bước 1: Gửi email chứa link reset password
**POST** `/api/auth/forgot-password`
#### Request body
```json
{
  "email": "123@example.com"
}
```
#### bước 2: Reset password
**POST** `/api/auth/reset-password`
#### Request
body
```json
{
  "token": "reset_token",
  "newPassword": "new_password"
  "confirmPassword": "new_password"
}
```

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>dev.edu.ngochandev</groupId>
    <artifactId>elearning-platform</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

</project>

================
File: services/auth-service/.gitattributes
================
/mvnw text eol=lf
*.cmd text eol=crlf

================
File: services/auth-service/.gitignore
================
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

================
File: services/auth-service/.mvn/wrapper/maven-wrapper.properties
================
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.11/apache-maven-3.9.11-bin.zip

================
File: services/auth-service/mvnw
================
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

================
File: services/auth-service/mvnw.cmd
================
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

================
File: services/auth-service/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.4</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>dev.edu.ngochandev</groupId>
    <artifactId>auth-service</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>auth-service</name>
    <description>auth-service</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>17</java.version>
        <org.mapstruct.version>1.6.3</org.mapstruct.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-crypto</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${org.mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/AuthServiceApplication.java
================
package dev.edu.ngochandev.authservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;

@SpringBootApplication
@EnableJpaAuditing
public class AuthServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(AuthServiceApplication.class, args);
    }

}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/MailStatus.java
================
package dev.edu.ngochandev.authservice.commons.enums;

import lombok.Getter;

@Getter
public enum MailStatus {
    PENDING("pending"),
    SENT("sent"),
    FAILED("failed");

    private final String status;

    MailStatus(String status) {
        this.status = status;
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/MailType.java
================
package dev.edu.ngochandev.authservice.commons.enums;

import lombok.Getter;

@Getter
public enum MailType {
    FORGOT_PASSWORD("forgot-password"),
    RESET_PASSWORD("reset-password"),
    ACCOUNT_ACTIVATION("account-activation"),
    EMAIL_VERIFICATION("email-verification");

    private final String type;

    MailType(String type) {
        this.type = type;
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/OperatorFilter.java
================
package dev.edu.ngochandev.authservice.commons.enums;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;

@Getter
public enum OperatorFilter {
    @JsonProperty("eq")
    EQUALS("eq"),
    @JsonProperty("contains")
    CONTAINS("contains"),
    @JsonProperty("gt")
    GREATER_THAN("gt"),
    @JsonProperty("lt")
    LESS_THAN("lt"),
    @JsonProperty("between")
    BETWEEN("between"),
    @JsonProperty("in")
    IN("in");

    private final String value;

    OperatorFilter(String value) {
        this.value = value;
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/TokenType.java
================
package dev.edu.ngochandev.authservice.commons.enums;

public enum TokenType {
    ACCESS_TOKEN,
    FORGOT_PASSWORD_TOKEN,
    REFRESH_TOKEN,
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/UserStatus.java
================
package dev.edu.ngochandev.authservice.commons.enums;

public enum UserStatus {
    ACTIVE,
    INACTIVE,
    BLOCKED,
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/MyUtils.java
================
package dev.edu.ngochandev.authservice.commons;

import dev.edu.ngochandev.authservice.exceptions.DateFormatException;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class MyUtils {
    public static LocalDateTime parseFlexibleDate(String date) {
        try{
            return LocalDateTime.parse(date, DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss"));
        } catch (DateTimeParseException e) {
            throw new DateFormatException("error.date.invalid");
        }
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/Translator.java
================
package dev.edu.ngochandev.authservice.commons;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.stereotype.Component;

import java.util.Locale;

@Component
public class Translator {
    private static ResourceBundleMessageSource messageSource;
    @Autowired
    public Translator(ResourceBundleMessageSource messageSource) {
        Translator.messageSource = messageSource;
    }

    public static String translate(String code){
        Locale locale = LocaleContextHolder.getLocale();
        return messageSource.getMessage(code, null, locale);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/AuditorAwareConfig.java
================
package dev.edu.ngochandev.authservice.configs;

import org.springframework.data.domain.AuditorAware;
import org.springframework.stereotype.Component;

import java.util.Optional;

@Component
public class AuditorAwareConfig implements AuditorAware<Long> {
    @Override
    public Optional<Long> getCurrentAuditor() {
        return Optional.of(-1L);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/CustomJwtDecoder.java
================
package dev.edu.ngochandev.authservice.configs;

import com.nimbusds.jose.JWSAlgorithm;
import dev.edu.ngochandev.authservice.repositories.InvalidatedTokenRepository;
import dev.edu.ngochandev.authservice.services.JwtService;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.oauth2.jose.jws.MacAlgorithm;
import org.springframework.security.oauth2.jwt.*;
import org.springframework.stereotype.Component;

import javax.crypto.spec.SecretKeySpec;
import java.text.ParseException;

@Component
@RequiredArgsConstructor
public class CustomJwtDecoder implements JwtDecoder {
    @Value("${jwt.access-token-secret}")
    private String jwtSecretKey;

    private final JwtService jwtService;
    private final InvalidatedTokenRepository invalidatedTokenRepository;
    private NimbusJwtDecoder nimbusJwtDecoder;

    @Override
    public Jwt decode(String token) {
        Jwt jwtDecoder;
        jwtDecoder = nimbusJwtDecoder.decode(token); // check (expired, malformed, bad signature)

        try {
            boolean isExists = invalidatedTokenRepository.existsById(jwtService.extractJti(token));
            if(isExists){
                throw new BadJwtException("error.token.invalid"); //check token logout
            }
            return jwtDecoder;
        }catch (ParseException e){
            throw new BadJwtException("error.token.invalid");
        }
    }

    @PostConstruct
    public void init() {
        SecretKeySpec secretKeySpec = new SecretKeySpec(jwtSecretKey.getBytes(), JWSAlgorithm.HS256.getName());
        nimbusJwtDecoder = NimbusJwtDecoder
                .withSecretKey(secretKeySpec)
                .macAlgorithm(MacAlgorithm.HS256)
                .build();
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/LocalResolver.java
================
package dev.edu.ngochandev.authservice.configs;

import jakarta.servlet.http.HttpServletRequest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.util.StringUtils;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;

import java.util.List;
import java.util.Locale;

@Configuration
public class LocalResolver extends AcceptHeaderLocaleResolver implements WebMvcConfigurer {
    @Override
    public Locale resolveLocale(HttpServletRequest request) {
        String language = request.getHeader("Accept-Language");
         List<Locale> listLocale = List.of(new Locale("en", "US"), new Locale("vi", "VN"));
        return StringUtils.hasLength(language) ? Locale.lookup(Locale.LanguageRange.parse(language), listLocale) : Locale.getDefault();
    }

    @Bean
    public ResourceBundleMessageSource messageSource() {
        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
        messageSource.setBasename("messages");
        messageSource.setDefaultEncoding("UTF-8");
        messageSource.setCacheSeconds(3600);
        return messageSource;
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/SecurityConfig.java
================
package dev.edu.ngochandev.authservice.configs;

import com.fasterxml.jackson.databind.ObjectMapper;
import dev.edu.ngochandev.authservice.commons.Translator;
import dev.edu.ngochandev.authservice.dtos.res.ErrorResponseDto;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpStatus;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@RequiredArgsConstructor
public class SecurityConfig {
    private final CustomJwtDecoder jwtDecoder;

    private final String[] PUBLIC_ENDPOINTS = {
            "/api/auth/register",
            "/api/auth/authenticate",
            "/api/auth/change-password",
            "/api/auth/refresh-token",
            "/api/auth/logout",
    };

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(auth ->{
                    auth.requestMatchers(PUBLIC_ENDPOINTS).permitAll()
                            .anyRequest().authenticated();
                })
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .httpBasic(AbstractHttpConfigurer::disable)
                .oauth2ResourceServer(oauth2 ->{
                    oauth2.jwt(jwtConfigurer -> jwtConfigurer.decoder(jwtDecoder))
                            .authenticationEntryPoint(authenticationEntryPoint());
                })
        ;
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(10);
    }

    @Bean
    AuthenticationEntryPoint authenticationEntryPoint() {
        return (request, response, authException) -> {
            String message = authException.getMessage();
            if(message.contains("Jwt expired")){
                message = Translator.translate("error.token.expired");
            } else {
                message = Translator.translate("error.token.invalid");
            }
            ErrorResponseDto errorResponse = new ErrorResponseDto(HttpStatus.UNAUTHORIZED, message, null );
            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            response.getWriter().write(new ObjectMapper().writeValueAsString(errorResponse));
        };
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/controllers/AuthController.java
================
package dev.edu.ngochandev.authservice.controllers;

import com.nimbusds.jose.JOSEException;
import dev.edu.ngochandev.authservice.commons.Translator;
import dev.edu.ngochandev.authservice.dtos.req.*;
import dev.edu.ngochandev.authservice.dtos.res.SuccessResponseDto;
import dev.edu.ngochandev.authservice.dtos.res.TokenResponseDto;
import dev.edu.ngochandev.authservice.dtos.res.UserResponseDto;
import dev.edu.ngochandev.authservice.services.AuthService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import java.text.ParseException;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {
    private final AuthService userService;

    @PostMapping("/register")
    @ResponseStatus(HttpStatus.CREATED)
    public SuccessResponseDto<UserResponseDto> register(@RequestBody @Valid UserRegisterRequestDto req) {
        return SuccessResponseDto.<UserResponseDto>builder()
                .status(HttpStatus.CREATED.value())
                .message(Translator.translate("user.register.success"))
                .data(userService.register(req))
                .build();
    }

    @PostMapping("/authenticate")
    @ResponseStatus(HttpStatus.OK)
    public SuccessResponseDto<TokenResponseDto> login(@RequestBody @Valid AuthenticationRequestDto req) throws JOSEException, ParseException {
        return SuccessResponseDto.<TokenResponseDto>builder()
                .status(HttpStatus.OK.value())
                .message(Translator.translate("user.authenticate.success"))
                .data(userService.authenticate(req))
                .build();
    }
    @PatchMapping("/change-password")
    @ResponseStatus(HttpStatus.OK)
    public SuccessResponseDto<Long> changePassword(@RequestBody @Valid UserChangePasswordRequestDto req){
        return SuccessResponseDto.<Long>builder()
                .status(HttpStatus.OK.value())
                .message(Translator.translate("user.change-password.success"))
                .data(userService.changePassword(req))
                .build();
    }

    @PostMapping("/refresh-token")
    @ResponseStatus(HttpStatus.OK)
    public SuccessResponseDto<TokenResponseDto> refreshToken(@RequestBody @Valid AuthRefreshTokenRequestDto req) throws JOSEException, ParseException {
        return SuccessResponseDto.<TokenResponseDto>builder()
                .status(HttpStatus.OK.value())
                .message(Translator.translate("user.refresh-token.success"))
                .data(userService.refreshToken(req))
                .build();
    }
    @PostMapping("/logout")
    @ResponseStatus(HttpStatus.OK)
    public SuccessResponseDto<String> logout(@RequestBody @Valid AuthLogoutRequestDto req) throws ParseException, JOSEException {
        return SuccessResponseDto.<String>builder()
                .status(HttpStatus.OK.value())
                .message(Translator.translate("user.logout.success"))
                .data(userService.logout(req))
                .build();
    }
    @PostMapping("/forgot-password")
    @ResponseStatus(HttpStatus.OK)
    public SuccessResponseDto<Boolean> forgotPassword(@RequestBody @Valid UserForgotPasswordRequestDto req) throws ParseException, JOSEException {
        return SuccessResponseDto.<Boolean>builder()
                .status(HttpStatus.OK.value())
                .message(Translator.translate("user.forgot-password.success"))
                .data(userService.forgotPassword(req))
                .build();
    }
    @PostMapping("/reset-password")
    @ResponseStatus(HttpStatus.OK)
    public SuccessResponseDto<Boolean> resetPassword(@RequestBody @Valid UserResetPasswordRequestDto req) throws ParseException, JOSEException {
        return SuccessResponseDto.<Boolean>builder()
                .status(HttpStatus.OK.value())
                .message(Translator.translate("user.reset-password.success"))
                .data(userService.resetPassword(req))
                .build();
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/controllers/UserController.java
================
package dev.edu.ngochandev.authservice.controllers;

import dev.edu.ngochandev.authservice.commons.Translator;
import dev.edu.ngochandev.authservice.dtos.req.FilterRequestDto;
import dev.edu.ngochandev.authservice.dtos.res.PageResponseDto;
import dev.edu.ngochandev.authservice.dtos.res.SuccessResponseDto;
import dev.edu.ngochandev.authservice.dtos.res.UserResponseDto;
import dev.edu.ngochandev.authservice.services.UserService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/users")
@RequiredArgsConstructor
public class UserController {
    private final UserService userService;
    @PostMapping("/list")
    @ResponseStatus(HttpStatus.OK)
    public SuccessResponseDto<PageResponseDto<UserResponseDto>> listUsers(@RequestBody @Valid FilterRequestDto filter) {
        return SuccessResponseDto.<PageResponseDto<UserResponseDto>>builder()
                .status(HttpStatus.OK.value())
                .message(Translator.translate("user.get.success"))
                .data(userService.listUsers(filter))
                .build();
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthenticationRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;

@Getter
public class AuthenticationRequestDto {
    @NotBlank(message = "error.identifier.not-blank")
    private String identifier; // can be username or email
    @NotBlank(message = "error.password.not-blank")
    private String password;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthLogoutRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;

@Getter
public class AuthLogoutRequestDto {
    @NotBlank(message = "error.token.not-blank")
    private String token;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthRefreshTokenRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;

@Getter
public class AuthRefreshTokenRequestDto {
    @NotBlank(message = "error.token.not-blank")
    private String token;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/FilterRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import dev.edu.ngochandev.authservice.commons.enums.OperatorFilter;
import jakarta.validation.constraints.Pattern;
import lombok.Getter;
import lombok.Setter;

import java.util.List;

@Setter
@Getter
public class FilterRequestDto {
    private int page = 1;
    private int size = 10;
    private String search = "";
    @Pattern(regexp = "^[a-zA-Z_][a-zA-Z0-9_]*:(ASC|DESC|asc|desc)$", message = "error.sort.invalid")
    private String sort = "id:DESC";
    private List<FilterData> filters = List.of();

    @Getter
    @Setter
    public static class FilterData {
        private String field;
        private OperatorFilter operator;
        private Object value;
    }

}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserChangePasswordRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.Getter;

@Getter
public class UserChangePasswordRequestDto {
    @NotNull(message = "error.user-id.not-null")
    @Min(value = 1, message = "error.user-id.invalid")
    private Long userId;

    @NotBlank(message = "error.password.not-blank")
    private String oldPassword;

    @Size(min = 8, message = "error.password.too-short")
    @NotBlank(message = "error.password.not-blank")
    private String newPassword;

    @NotBlank(message = "error.password.not-blank")
    @Size(min = 8, message = "error.password.too-short")
    private String confirmPassword;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserForgotPasswordRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import lombok.Getter;

@Getter
public class UserForgotPasswordRequestDto {
    private String email;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserRegisterRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Getter;

@Getter
public class UserRegisterRequestDto {
    @NotBlank(message = "error.username.not-blank")
    private String username;

    @NotBlank(message = "error.fullname.not-blank")
    private String fullName;

    @NotBlank(message = "error.email.not-blank")
    @Email(message = "error.email.invalid")
    private String email;

    @NotBlank(message = "error.password.not-blank")
    @Size(min = 8, message = "error.password.too-short")
    private String password;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserResetPasswordRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.Getter;

@Getter
public class UserResetPasswordRequestDto {

    @NotBlank(message = "error.token.not-blank")
    private String token;

    @Size(min = 8, message = "error.password.too-short")
    @NotBlank(message = "error.password.not-blank")
    private String newPassword;

    @NotBlank(message = "error.password.not-blank")
    @Size(min = 8, message = "error.password.too-short")
    private String confirmPassword;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/ErrorResponseDto.java
================
package dev.edu.ngochandev.authservice.dtos.res;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.http.HttpStatus;
import org.springframework.web.context.request.WebRequest;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Getter
@Setter
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ErrorResponseDto {
    private int status;
    private String error;
    private String message;
    private Date timestamp;
    private String path;
    private Map<String, String> errors;

    public ErrorResponseDto(HttpStatus status, String message, WebRequest webRequest) {
        this.status = status.value();
        this.error = status.getReasonPhrase();
        this.message = message;
        this.timestamp = new Date();
        this.path = webRequest != null ? webRequest.getDescription(false).replace("uri=", "") : null;
    }

    public void addValidationError(String field, String message) {
        if (errors == null) {
            errors = new HashMap<>();
        }
        errors.put(field, message);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/PageResponseDto.java
================
package dev.edu.ngochandev.authservice.dtos.res;

import lombok.Builder;
import lombok.Getter;

import java.util.List;

@Builder
@Getter
public class PageResponseDto<T> {
    private int currentPage;
    private long totalElements;
    private int totalPages;
    private List<T> items;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/SuccessResponseDto.java
================
package dev.edu.ngochandev.authservice.dtos.res;


import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SuccessResponseDto<T>{
    private int status;
    private String message;
    private T data;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/TokenResponseDto.java
================
package dev.edu.ngochandev.authservice.dtos.res;


import lombok.Builder;
import lombok.Getter;

import java.util.Date;

@Getter
@Builder
public class TokenResponseDto {
    private String accessToken;
    private String refreshToken;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/UserResponseDto.java
================
package dev.edu.ngochandev.authservice.dtos.res;

import dev.edu.ngochandev.authservice.commons.enums.UserStatus;
import lombok.Builder;

@Builder
public record UserResponseDto (Long id, String username, String fullName, String email, UserStatus status, String createdAt){}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/BaseEntity.java
================
package dev.edu.ngochandev.authservice.entities;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;

@MappedSuperclass
@Getter
@Setter
@EntityListeners(AuditingEntityListener.class)
public class BaseEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "is_deleted", nullable = false)
    private Boolean isDeleted;

    @Column(name = "created_at")
    @Temporal(TemporalType.TIMESTAMP)
    @CreationTimestamp
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    @Temporal(TemporalType.TIMESTAMP)
    @UpdateTimestamp
    private LocalDateTime updatedAt;

    @Column(name = "created_by", nullable = true, updatable = false)
    @CreatedBy
    private Long createdBy;

    @Column(name = "updated_by", nullable = true)
    @LastModifiedBy
    private Long updatedBy;

    @PrePersist
    public void prePersist() {
        if (isDeleted == null) {
            isDeleted = false;
        }
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/InvalidatedTokenEntity.java
================
package dev.edu.ngochandev.authservice.entities;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.*;

import java.util.Date;

@Entity
@Table(name = "tbl_invalidated_tokens")
@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class InvalidatedTokenEntity {
    @Id
    private String id;
    private Date expiredTime;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/MailEntity.java
================
package dev.edu.ngochandev.authservice.entities;

import dev.edu.ngochandev.authservice.commons.enums.MailStatus;
import dev.edu.ngochandev.authservice.commons.enums.MailType;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "tbl_email")
@Setter
@Getter
public class MailEntity extends BaseEntity {

    @Column(name = "form",nullable = false)
    private String from;

    @Column(name = "to", nullable = false)
    private String to;

    @Column(name = "subject", nullable = false, length = 512)
    private String subject;

    @Column(name = "content", nullable = false, columnDefinition = "TEXT")
    private String content;

    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false)
    private MailStatus status;

    @Enumerated(EnumType.STRING)
    @Column(name = "type", nullable = false)
    private MailType type;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/UserEntity.java
================
package dev.edu.ngochandev.authservice.entities;

import dev.edu.ngochandev.authservice.commons.enums.UserStatus;
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "tbl_user")
@Getter
@Builder
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class UserEntity extends BaseEntity {
    @Column(name = "username", nullable = false, unique = true)
    private String username;

    @Column(name = "full_name", nullable = false)
    private String fullName;

    @Column(name = "email", nullable = false, unique = true)
    private String email;

    @Column(name = "password", nullable = false)
    private String password;

    @Column(name = "status", nullable = true)
    @Enumerated(EnumType.STRING)
    private UserStatus status;

}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/DateFormatException.java
================
package dev.edu.ngochandev.authservice.exceptions;

public class DateFormatException extends RuntimeException {
    public DateFormatException(String message) {
        super(message);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/DuplicateResourceException.java
================
package dev.edu.ngochandev.authservice.exceptions;

public class DuplicateResourceException extends RuntimeException {
    public DuplicateResourceException(String message) {
        super(message);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/FilterDataException.java
================
package dev.edu.ngochandev.authservice.exceptions;

public class FilterDataException extends RuntimeException{
    public FilterDataException(String message) {
        super(message);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/GlobalExceptionHandler.java
================
package dev.edu.ngochandev.authservice.exceptions;

import dev.edu.ngochandev.authservice.commons.Translator;
import dev.edu.ngochandev.authservice.dtos.res.ErrorResponseDto;
import org.springframework.http.HttpStatus;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;

@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public ErrorResponseDto handleGlobalException(Exception ex, WebRequest req) {
        System.out.println(ex.getClass());
        String message = ex.getMessage() != null ? ex.getMessage() : "An unexpected error occurred";
        return new ErrorResponseDto(HttpStatus.INTERNAL_SERVER_ERROR,message, req);
    }
    @ExceptionHandler(FilterDataException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ErrorResponseDto handleFilterDataException(FilterDataException ex, WebRequest req) {
        return new ErrorResponseDto(HttpStatus.BAD_REQUEST, ex.getMessage(), req);
    }

    @ExceptionHandler(ResourceNotFoundException.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public ErrorResponseDto handleResourceNotFound(Exception ex, WebRequest req) {
        return new ErrorResponseDto(HttpStatus.NOT_FOUND, Translator.translate(ex.getMessage()), req);
    }

    @ExceptionHandler(DateFormatException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ErrorResponseDto handleDateFormatException(DateFormatException ex, WebRequest req) {
        return new ErrorResponseDto(HttpStatus.BAD_REQUEST, Translator.translate(ex.getMessage()), req);
    }

    @ExceptionHandler({MethodArgumentNotValidException.class})
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ErrorResponseDto handleValidationExceptions(MethodArgumentNotValidException ex, WebRequest req) {
        ErrorResponseDto res = new ErrorResponseDto(HttpStatus.BAD_REQUEST, Translator.translate("error.body.invalid"), req);
        if(ex.getBindingResult().hasErrors()) {
            ex.getBindingResult().getFieldErrors().forEach(fieldError -> {
                String message = Translator.translate(fieldError.getDefaultMessage());
                res.addValidationError(fieldError.getField(), message);
            });
        }
        return res;
    }

    @ExceptionHandler(HttpMessageNotReadableException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ErrorResponseDto handleHttpMessageNotReadableException(HttpMessageNotReadableException ex, WebRequest req) {
        String message = ex.getMessage();
        int startIndex = message.indexOf("[")+1;
        int endIndex = message.indexOf("]");
        message = message.substring(startIndex, endIndex);
        return new ErrorResponseDto(HttpStatus.BAD_REQUEST,Translator.translate("error.enum.invalid")+" "+ message, req);
    }

    @ExceptionHandler(UnauthorizedException.class)
    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    public ErrorResponseDto handleUnauthorizedException(UnauthorizedException ex, WebRequest req) {
        return  new ErrorResponseDto(HttpStatus.UNAUTHORIZED,Translator.translate(ex.getMessage()), req);
    }

    @ExceptionHandler(DuplicateResourceException.class)
    @ResponseStatus(HttpStatus.CONFLICT)
    public ErrorResponseDto handleDuplicateResourceException(DuplicateResourceException ex, WebRequest req) {
        return new ErrorResponseDto(HttpStatus.CONFLICT,Translator.translate(ex.getMessage()), req);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/ResourceNotFoundException.java
================
package dev.edu.ngochandev.authservice.exceptions;

public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/UnauthorizedException.java
================
package dev.edu.ngochandev.authservice.exceptions;

public class UnauthorizedException extends RuntimeException {
    public UnauthorizedException(String message) {
        super(message);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/mappers/UserMapper.java
================
package dev.edu.ngochandev.authservice.mappers;

import dev.edu.ngochandev.authservice.dtos.res.UserResponseDto;
import dev.edu.ngochandev.authservice.entities.UserEntity;
import org.mapstruct.Mapper;

@Mapper(componentModel = "spring")
public interface UserMapper {
    UserResponseDto toResponseDto(UserEntity entity);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/InvalidatedTokenRepository.java
================
package dev.edu.ngochandev.authservice.repositories;

import dev.edu.ngochandev.authservice.entities.InvalidatedTokenEntity;
import org.springframework.data.jpa.repository.JpaRepository;

public interface InvalidatedTokenRepository extends JpaRepository<InvalidatedTokenEntity, String> {
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/MailRepository.java
================
package dev.edu.ngochandev.authservice.repositories;

import dev.edu.ngochandev.authservice.entities.MailEntity;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MailRepository extends JpaRepository<MailEntity, Long> {
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/UserRepository.java
================
package dev.edu.ngochandev.authservice.repositories;

import dev.edu.ngochandev.authservice.entities.UserEntity;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<UserEntity, Long>, JpaSpecificationExecutor<UserEntity> {
    boolean existsByUsername(String username);

    boolean existsByEmail(String email);

    @Query("SELECT u FROM UserEntity u WHERE u.username = :identifier OR u.email = :identifier")
    Optional<UserEntity> findByUsernameOrEmail(String identifier);

}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/AuthService.java
================
package dev.edu.ngochandev.authservice.services;

import com.nimbusds.jose.JOSEException;
import dev.edu.ngochandev.authservice.dtos.req.*;
import dev.edu.ngochandev.authservice.dtos.res.TokenResponseDto;
import dev.edu.ngochandev.authservice.dtos.res.UserResponseDto;

import java.text.ParseException;

public interface AuthService {
    UserResponseDto register(UserRegisterRequestDto req);
    TokenResponseDto authenticate(AuthenticationRequestDto req) throws JOSEException, ParseException;

    Long changePassword(UserChangePasswordRequestDto req);

    TokenResponseDto refreshToken( AuthRefreshTokenRequestDto req) throws ParseException, JOSEException;

    String logout(AuthLogoutRequestDto req) throws ParseException, JOSEException;

    Boolean forgotPassword(UserForgotPasswordRequestDto req) throws ParseException, JOSEException;
    Boolean resetPassword(UserResetPasswordRequestDto req) throws ParseException, JOSEException;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/AuthServiceImpl.java
================
package dev.edu.ngochandev.authservice.services.impl;

import com.nimbusds.jose.JOSEException;
import dev.edu.ngochandev.authservice.dtos.req.*;
import dev.edu.ngochandev.authservice.dtos.res.TokenResponseDto;
import dev.edu.ngochandev.authservice.dtos.res.UserResponseDto;
import dev.edu.ngochandev.authservice.entities.InvalidatedTokenEntity;
import dev.edu.ngochandev.authservice.entities.UserEntity;
import dev.edu.ngochandev.authservice.commons.enums.TokenType;
import dev.edu.ngochandev.authservice.commons.enums.UserStatus;
import dev.edu.ngochandev.authservice.exceptions.DuplicateResourceException;
import dev.edu.ngochandev.authservice.exceptions.ResourceNotFoundException;
import dev.edu.ngochandev.authservice.exceptions.UnauthorizedException;
import dev.edu.ngochandev.authservice.mappers.UserMapper;
import dev.edu.ngochandev.authservice.repositories.InvalidatedTokenRepository;
import dev.edu.ngochandev.authservice.repositories.UserRepository;
import dev.edu.ngochandev.authservice.services.AuthService;
import dev.edu.ngochandev.authservice.services.JwtService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.text.ParseException;
import java.util.Date;

@Service
@Slf4j(topic = "USER-SERVICE")
@RequiredArgsConstructor
public class AuthServiceImpl implements AuthService {
    private final UserRepository userRepository;
    private final UserMapper userMapper;
    private final PasswordEncoder passwordEncoder;
    private final JwtService jwtService;
    private final InvalidatedTokenRepository invalidatedTokenRepository;

    @Override
    public UserResponseDto register(UserRegisterRequestDto req) {
        if(userRepository.existsByUsername((req.getUsername()))){
            throw new DuplicateResourceException("error.duplicate.username");
        }
        if(userRepository.existsByEmail((req.getEmail()))){
            throw new DuplicateResourceException("error.duplicate.email");
        }
        UserEntity savedUser = userRepository.save(UserEntity.builder()
                        .fullName(req.getFullName())
                        .username(req.getUsername())
                        .email(req.getEmail())
                        .password(passwordEncoder.encode(req.getPassword()))
                        .status(UserStatus.INACTIVE)
                        .build());
        return userMapper.toResponseDto(savedUser);
    }

    @Override
    public TokenResponseDto authenticate(AuthenticationRequestDto req) throws JOSEException, ParseException {
        UserEntity user = userRepository.findByUsernameOrEmail(req.getIdentifier())
                .orElseThrow(() -> new ResourceNotFoundException("error.user.not-found"));
        if(!passwordEncoder.matches(req.getPassword(), user.getPassword())){
            throw new UnauthorizedException("error.invalid.username-or-email");
        }
        String accessToken = jwtService.generateToken(user, TokenType.ACCESS_TOKEN);
        String refreshToken = jwtService.generateToken(user, TokenType.REFRESH_TOKEN);
        return TokenResponseDto.builder()
                .accessToken(accessToken)
                .refreshToken(refreshToken)
                .build();
    }

    @Override
    public Long changePassword(UserChangePasswordRequestDto req) {
        UserEntity user = this.getUserById(req.getUserId());
        if(!passwordEncoder.matches(req.getOldPassword(), user.getPassword())){
            throw new UnauthorizedException("error.invalid.old-password");
        }
        if(!req.getNewPassword().equals(req.getConfirmPassword())){
            throw new UnauthorizedException("error.passwords.not-match");
        }
        user.setPassword(passwordEncoder.encode(req.getNewPassword()));
        return userRepository.save(user).getId();
    }

    @Override
    public TokenResponseDto refreshToken(AuthRefreshTokenRequestDto req) throws ParseException, JOSEException {
        boolean isValid = jwtService.validateToken(req.getToken(), TokenType.REFRESH_TOKEN);
        if(!isValid){
            throw new UnauthorizedException("error.token.invalid");
        }
        //disable current token
        String currentJti = jwtService.extractJti(req.getToken());
        Date currentExpiration = jwtService.extractExpiration(req.getToken());
        invalidatedTokenRepository.save(InvalidatedTokenEntity.builder()
                        .id(currentJti)
                        .expiredTime(currentExpiration)
                .build());
        //return new token
        String username = jwtService.extractUsername(req.getToken());
        UserEntity user = userRepository.findByUsernameOrEmail(username).orElseThrow(() -> new ResourceNotFoundException("error.user.not-found"));
        String accessToken = jwtService.generateToken(user, TokenType.ACCESS_TOKEN);
        String refreshToken = jwtService.generateToken(user, TokenType.REFRESH_TOKEN);
        return TokenResponseDto.builder()
                .accessToken(accessToken)
                .refreshToken(refreshToken)
                .build();
    }

    @Override
    public String logout(AuthLogoutRequestDto req) throws ParseException, JOSEException {
        boolean isValid = jwtService.validateToken(req.getToken(), TokenType.ACCESS_TOKEN);
        if(!isValid){
            throw new UnauthorizedException("error.token.invalid");
        }
        String jti = jwtService.extractJti(req.getToken());
        Date expiration = jwtService.extractExpiration(req.getToken());

        InvalidatedTokenEntity invalidToken = InvalidatedTokenEntity.builder()
                .id(jti)
                .expiredTime(expiration)
                .build();

        return invalidatedTokenRepository.save(invalidToken).getId();
    }

    @Override
    public Boolean forgotPassword(UserForgotPasswordRequestDto req) throws ParseException, JOSEException {
        return null;
    }

    @Override
    public Boolean resetPassword(UserResetPasswordRequestDto req) throws ParseException, JOSEException {
        return null;
    }

    private UserEntity getUserById(Long id){
        return userRepository.findById(id).orElseThrow(()-> new ResourceNotFoundException("error.user.not-found"));
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/JwtServiceImpl.java
================
package dev.edu.ngochandev.authservice.services.impl;


import com.nimbusds.jose.*;
import com.nimbusds.jose.crypto.MACSigner;
import com.nimbusds.jose.crypto.MACVerifier;
import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.SignedJWT;
import dev.edu.ngochandev.authservice.entities.UserEntity;
import dev.edu.ngochandev.authservice.commons.enums.TokenType;
import dev.edu.ngochandev.authservice.repositories.InvalidatedTokenRepository;
import dev.edu.ngochandev.authservice.services.JwtService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.text.ParseException;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.Date;
import java.util.UUID;

@Service
@Slf4j(topic = "JWT-SERVICE")
@RequiredArgsConstructor
public class JwtServiceImpl implements JwtService {
    @Value("${jwt.access-token-secret}")
    private String accessSecretKey;

    @Value("${jwt.forgot-password-token-secret}")
    private String forgotPasswordSecretKey;

    @Value("${jwt.access-expiration}")
    private Long accessExpiration;

    @Value("${jwt.forgot-password-expiration}")
    private Long forgotPasswordExpiration;

    @Value("${jwt.refresh-token-secret}")
    private String refreshSecretKey;

    @Value("${jwt.refresh-expiration}")
    private Long refreshExpiration;

    @Value("${jwt.issuer}")
    private String issuer;
    private final InvalidatedTokenRepository invalidatedTokenRepository;

    @Override
    public String generateToken(UserEntity user, TokenType type) throws JOSEException {
        return switch (type){
            case ACCESS_TOKEN -> this.generateToken(user, accessSecretKey, accessExpiration);
            case REFRESH_TOKEN -> this.generateToken(user, refreshSecretKey, refreshExpiration);
            case FORGOT_PASSWORD_TOKEN -> this.generateToken(user, forgotPasswordSecretKey, forgotPasswordExpiration);
        };
    }

    private String generateToken(UserEntity user, String secretKey, Long expirationTime) throws JOSEException {
        JWSHeader header = new JWSHeader(JWSAlgorithm.HS256);

        JWTClaimsSet jwtClaimsSet = new JWTClaimsSet.Builder()
                .issueTime(new Date())
                .expirationTime(new Date(Instant.now().plus(expirationTime, ChronoUnit.MINUTES).toEpochMilli()))
                .subject(user.getUsername())
                .issuer(issuer)
                .jwtID(UUID.randomUUID().toString())
                .build();

        Payload payload = new Payload(jwtClaimsSet.toJSONObject());

        JWSObject jwsObject = new JWSObject(header, payload);
        jwsObject.sign(new MACSigner(secretKey));
        return jwsObject.serialize();
    }

    @Override
    public boolean validateToken(String token, TokenType type) throws JOSEException, ParseException {
        byte[] secretKey = switch (type) {
            case ACCESS_TOKEN -> accessSecretKey.getBytes();
            case REFRESH_TOKEN -> refreshSecretKey.getBytes();
            case FORGOT_PASSWORD_TOKEN -> forgotPasswordSecretKey.getBytes();
        };

        JWSVerifier verifier = new MACVerifier(secretKey);
        SignedJWT signedJWT = SignedJWT.parse(token);
        Date expirationTime = signedJWT.getJWTClaimsSet().getExpirationTime();
        if(!signedJWT.verify(verifier) || expirationTime.before(new Date())){
            return false;
        }
        return !invalidatedTokenRepository.existsById(this.extractJti(token));
    }

    @Override
    public String extractUsername(String token) throws ParseException {
        return  SignedJWT.parse(token).getJWTClaimsSet().getSubject();
    }

    @Override
    public String extractJti(String token) throws ParseException {
        return SignedJWT.parse(token).getJWTClaimsSet().getJWTID();
    }

    @Override
    public Date extractExpiration(String token) throws ParseException {
        return SignedJWT.parse(token).getJWTClaimsSet().getExpirationTime();
    }

}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/UserServiceImpl.java
================
package dev.edu.ngochandev.authservice.services.impl;

import dev.edu.ngochandev.authservice.dtos.req.FilterRequestDto;
import dev.edu.ngochandev.authservice.dtos.res.PageResponseDto;
import dev.edu.ngochandev.authservice.dtos.res.UserResponseDto;
import dev.edu.ngochandev.authservice.entities.UserEntity;
import dev.edu.ngochandev.authservice.mappers.UserMapper;
import dev.edu.ngochandev.authservice.repositories.UserRepository;
import dev.edu.ngochandev.authservice.services.UserService;
import dev.edu.ngochandev.authservice.specifications.UserSpecification;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@Slf4j
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;
    private final UserMapper userMapper;

    @Override
    public PageResponseDto<UserResponseDto> listUsers(FilterRequestDto filter) {
        // valid fields

        Pageable pageable = createPageable(filter);
        Specification<UserEntity> spec = new UserSpecification(filter.getFilters(), filter.getSearch());
        Page<UserEntity> pageOfUsers = userRepository.findAll(spec, pageable);

        List<UserResponseDto> userDtos = pageOfUsers.map(userMapper::toResponseDto).toList();

        return PageResponseDto.<UserResponseDto>builder()
                .currentPage(filter.getPage())
                .totalElements(pageOfUsers.getTotalElements())
                .totalPages(pageOfUsers.getTotalPages())
                .items(userDtos)
                .build();
    }

    private Pageable createPageable(FilterRequestDto filter) {
        String[] sortParams = filter.getSort().split(":");
        String sortField = sortParams[0];
        Sort.Direction direction = sortParams.length > 1
                ? Sort.Direction.DESC
                : Sort.Direction.ASC;
        int page = filter.getPage() > 0 ? filter.getPage() - 1 : 0;
        int size = filter.getSize();
        return PageRequest.of(page, size, Sort.by(direction, sortField));
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/JwtService.java
================
package dev.edu.ngochandev.authservice.services;

import com.nimbusds.jose.JOSEException;
import dev.edu.ngochandev.authservice.entities.UserEntity;
import dev.edu.ngochandev.authservice.commons.enums.TokenType;

import java.text.ParseException;
import java.util.Date;

public interface JwtService {
    String generateToken(UserEntity user, TokenType type) throws JOSEException;

    boolean validateToken(String token, TokenType type) throws JOSEException, ParseException;

    String extractUsername(String token) throws ParseException;

    String extractJti(String token) throws ParseException;

    Date extractExpiration(String token) throws ParseException;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/MailService.java
================
package dev.edu.ngochandev.authservice.services;

import dev.edu.ngochandev.authservice.entities.MailEntity;

public interface MailService {
    boolean sendMail(MailEntity mail);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/UserService.java
================
package dev.edu.ngochandev.authservice.services;

import dev.edu.ngochandev.authservice.dtos.req.FilterRequestDto;
import dev.edu.ngochandev.authservice.dtos.res.PageResponseDto;
import dev.edu.ngochandev.authservice.dtos.res.UserResponseDto;

public interface UserService {
    PageResponseDto<UserResponseDto> listUsers(FilterRequestDto filter);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/specifications/UserSpecification.java
================
package dev.edu.ngochandev.authservice.specifications;

import dev.edu.ngochandev.authservice.commons.MyUtils;
import dev.edu.ngochandev.authservice.dtos.req.FilterRequestDto;
import dev.edu.ngochandev.authservice.entities.UserEntity;
import dev.edu.ngochandev.authservice.exceptions.FilterDataException;
import jakarta.persistence.criteria.*;
import org.springframework.dao.InvalidDataAccessApiUsageException;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.orm.jpa.JpaSystemException;
import org.springframework.util.StringUtils;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class UserSpecification implements Specification<UserEntity> {
    private final List<FilterRequestDto.FilterData> filterData;
    private final String search;

    public UserSpecification(List<FilterRequestDto.FilterData> filterData, String search) {
        this.filterData = filterData;
        this.search = search;
    }

    @Override
    public Predicate toPredicate(Root<UserEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
        List<Predicate> predicates = new ArrayList<>();

        //search
        if(StringUtils.hasLength(search)) {
            String searchPattern = "%" + search.toLowerCase() + "%";
            Predicate searchPredicate = cb.or(
                    cb.like(cb.lower(root.get("username")), searchPattern),
                    cb.like(cb.lower(root.get("email")), searchPattern),
                    cb.like(cb.lower(root.get("fullName")), searchPattern)
            );
            predicates.add(searchPredicate);
        }
        //filter
        if(filterData != null && !filterData.isEmpty()) {
            for(FilterRequestDto.FilterData filter : filterData) {
                String field = null;
                Class<?> fieldType =null;
                try{
                   field = filter.getField();
                   fieldType = root.get(field).getJavaType();

                   if(filter.getValue().getClass().isAssignableFrom(fieldType) || fieldType.isAssignableFrom(List.class)) {
                       throw new FilterDataException(String.format("Invalid filter value for field: %s must be of type %s or List<%s>", field, fieldType.getSimpleName(), fieldType.getSimpleName()));
                   }

                    switch (filter.getOperator()){
                        case EQUALS -> predicates.add(cb.equal(root.get(field), filter.getValue()));
                        case CONTAINS -> predicates.add(cb.like(root.get(field), "%" + ((String)filter.getValue()).toLowerCase() + "%"));
                        case GREATER_THAN -> predicates.add(cb.greaterThan(root.get(field), (Comparable) filter.getValue()));
                        case LESS_THAN -> predicates.add(cb.lessThan(root.get(field), (Comparable) filter.getValue()));
                        case BETWEEN -> {
                            List<?> valueList = (List<?>) filter.getValue();
                            if (fieldType == LocalDateTime.class) {
                                LocalDateTime start = MyUtils.parseFlexibleDate(valueList.get(0).toString());
                                LocalDateTime end = MyUtils.parseFlexibleDate(valueList.get(1).toString());
                                predicates.add(cb.between(root.get(field), start, end));
                            } else if ((fieldType == Integer.class) || (fieldType == int.class) || (fieldType == Long.class) || (fieldType == long.class)) {
                                Expression<Integer> expression = root.get(field);
                                Integer lower = Integer.parseInt(valueList.get(0).toString());
                                Integer upper = Integer.parseInt(valueList.get(1).toString());
                                predicates.add(cb.between(expression, lower, upper));
                            }
                        }
                        case IN -> {
                            if (filter.getValue() instanceof List<?> list && !list.isEmpty()) {
                                predicates.add(root.get(field).in(list));
                            }
                        }
                    }
                }catch (org.springframework.orm.jpa.JpaSystemException e){
                    throw new FilterDataException(String.format("Invalid filter value for field: %s must be of type %s or List<%s>", field, fieldType.getSimpleName(), fieldType.getSimpleName()));
                }catch (FilterDataException e){
                    throw e;
                }
            }
        }

        return cb.and(predicates.toArray(new Predicate[0]));
    }
}

================
File: services/auth-service/src/main/resources/application.yml
================
spring:
  application:
    name: auth-service
  datasource:
    url: ${AUTH_DB_URL}${AUTH_DB_NAME}
    username: ${AUTH_DB_USER}
    password: ${AUTH_DB_PASSWORD}
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    hibernate:
      ddl-auto: update
  mail:
    port: 587
    host: smtp.gmail.com
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    protocol: smtp
    default-encoding: UTF-8
    properties:
      mail:
        smtp:
          auth: true
          connection-timeout: 5000
          write-timeout: 5000
          timeout: 5000
          ssl:
            enable: true
          starttls:
            enable: true

server:
  port: 8080


jwt:
  access-token-secret: f0da559ea59ced68b4d657496bee9753c0447d70702af1a351c7577226d97723
  forgot-password-token-secret: 4b8c1f2d3e5f6a7b88g9h0a1b2c3d4e5f6a7b8c9d0e18g9h0a1b2c3d4e5f6a7
  refresh-token-secret: 9250e1b99bca8e9074b9393b0d7c194b42b5549d3b0d7c194b42b5549d
  access-expiration: 180 # 3 hours
  refresh-expiration: 4320 # 3 days
  forgot-password-expiration: 5 # 5 minutes
  issuer: ngochandev

================
File: services/auth-service/src/main/resources/banner.txt
================
,---.            ,--.  ,--.       ,---.                         ,--.
 /  O  \ ,--.,--.,-'  '-.|  ,---.  '   .-' ,---. ,--.--.,--.  ,--.`--' ,---. ,---.
|  .-.  ||  ||  |'-.  .-'|  .-.  | `.  `-.| .-. :|  .--' \  `'  / ,--.| .--'| .-. :
|  | |  |'  ''  '  |  |  |  | |  | .-'    \   --.|  |     \    /  |  |\ `--.\   --.
`--' `--' `----'   `--'  `--' `--' `-----' `----'`--'      `--'   `--' `---' `----'

${application.title} ${application.version}
Powered by Spring Boot ${spring-boot.version}

================
File: services/auth-service/src/main/resources/messages_vi.properties
================
# errors
error.duplicate.email=Email đã được sử dụng
error.duplicate.username=Tên đăng nhập đã được sử dụng
error.invalid.username-or-email=Tên đăng nhập hoặc email không hợp lệ
error.user.not-found=Không tìm thấy người dùng
error.body.invalid=Yêu cầu không hợp lệ
error.identifier.not-blank=Identifier không được để trống
error.password.not-blank=Mật khẩu không được để trống
error.username.not-blank=Tên đăng nhập không được để trống
error.fullname.not-blank=Tên đầy đủ không được để trống
error.email.not-blank=Email không được để trống
error.email.invalid=Email không hợp lệ
error.password.too-short=Mật khẩu phải có ít nhất 8 ký tự
error.user-id.not-null=ID người dùng không được để null
error.user-id.invalid=ID người dùng không hợp lệ
error.invalid.old-password=Mật khẩu cũ không hợp lệ
error.passwords.not-match=Mật khẩu mới và xác nhận không khớp
error.token.invalid=Token không hợp lệ hoặc bị thiếu
error.token.expired=Token đã hết hạn
error.token.not-blank=Token không được để trống
error.enum.invalid=Giá trị enum phải là một trong các giá trị sau:
error.sort.invalid=Giá trị sắp xếp phải có dạng: {field}:[asc|desc]
error.date.invalid=Ngày phải có định dạng: dd-MM-yyyy HH:mm:ss

# responses
user.register.success=Đăng ký người dùng thành công
user.authenticate.success=Xác thực người dùng thành công
user.change-password.success=Đổi mật khẩu thành công
user.refresh-token.success=Làm mới token thành công
user.logout.success=Đăng xuất người dùng thành công
user.get.success=Lấy thông tin người dùng thành công
user.forgot-password.success=Đã gửi email đặt lại mật khẩu
user.reset-password.success=Đặt lại mật khẩu thành công

================
File: services/auth-service/src/main/resources/messages.properties
================
# errors
error.duplicate.email=Email already in use
error.duplicate.username=Username already in use
error.invalid.username-or-email=Invalid username or email
error.user.not-found=User not found
error.body.invalid=Invalid request body
error.identifier.not-blank=Identifier must not be blank
error.password.not-blank=Password must not be blank
error.username.not-blank=Username must not be blank
error.fullname.not-blank=Full name must not be blank
error.email.not-blank=Email must not be blank
error.email.invalid=Email is invalid
error.password.too-short=Password must be at least 8 characters long
error.user-id.not-null=User ID must not be null
error.user-id.invalid=User ID is invalid
error.invalid.old-password=Old password is invalid
error.passwords.not-match=New password and confirmation do not match
error.token.invalid=Invalid or missing token
error.token.expired=Token has expired
error.token.not-blank=Token must not be blank
error.enum.invalid=Enum value must be one of:
error.sort.invalid=Sort value must be in the format: {field}:[asc|desc]
error.date.invalid=Date must be in the format: dd-MM-yyyy HH:mm:ss

# responses
user.register.success=User registration successful
user.authenticate.success=User authentication successful
user.change-password.success=Password changed successfully
user.refresh-token.success=Token refreshed successfully
user.logout.success=User logged out successfully
user.get.success=User retrieved successfully
user.forgot-password.success=Password reset link sent to email
user.reset-password.success=Password reset successfully

================
File: services/auth-service/src/test/java/dev/edu/ngochandev/authservice/AuthServiceApplicationTests.java
================
package dev.edu.ngochandev.authservice;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class AuthServiceApplicationTests {

    @Test
    void contextLoads() {
    }

}



================================================================
End of Codebase
================================================================
