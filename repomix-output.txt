This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
docker-compose.yml
docs/auth-service.md
docs/social-service.md
pom.xml
services/auth-service/.gitattributes
services/auth-service/.gitignore
services/auth-service/pom.xml
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/AuthServiceApplication.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/DataInitializer.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/HttpMethod.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/MailStatus.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/MailType.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/TokenType.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/UserStatus.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/MyUtils.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/AuditorAwareConfig.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/BeanStorage.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/CustomJwtDecoder.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/InternalApiAuthFilter.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/LocalResolver.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/OpenApiConfig.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/SecurityConfig.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/controllers/AuthController.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/controllers/PermissionController.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/controllers/RoleController.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/controllers/UserController.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AdminUserCreateRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthenticationRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthLogoutRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthRefreshTokenRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthVerifyTokenRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/RoleCreateRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/RoleManyDeleteRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserChangePasswordRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserForgotPasswordRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserManyDeleteRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserRegisterRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserResetPasswordRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserUpdateRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserVerifyEmailRequestDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/AdminUserResponse.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/PermissionResponseDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/RoleDetailResponseDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/RoleSummaryResponseDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/TokenResponseDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/UserResponseDto.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/BaseEntity.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/InvalidatedTokenEntity.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/MailEntity.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/PermissionEntity.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/RoleEntity.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/RolePermissionEntity.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/UserEntity.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/UserRoleEntity.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/CustomAccessDeniedHandler.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/FilterDataException.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/GlobalExceptionHandler.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/kafka/producers/UserEventKafkaProducer.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/mappers/PermissionMapper.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/mappers/PermissionMapperDecorator.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/mappers/RoleMapper.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/mappers/UserMapper.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/InvalidatedTokenRepository.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/MailRepository.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/PermissionRepository.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/RolePermissionRepository.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/RoleRepository.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/UserRepository.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/UserRoleRepository.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/AuthService.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/AuthServiceImpl.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/JwtServiceImpl.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/MailServiceImpl.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/PermissionServiceImpl.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/RoleServiceImpl.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/UserServiceImpl.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/JwtService.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/MailService.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/PermissionService.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/RoleService.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/UserService.java
services/auth-service/src/main/java/dev/edu/ngochandev/authservice/specifications/UserSpecification.java
services/auth-service/src/main/resources/application.yml
services/auth-service/src/main/resources/banner.txt
services/auth-service/src/main/resources/messages_auth_vi.properties
services/auth-service/src/main/resources/messages_auth.properties
services/auth-service/src/main/resources/migrations/permissions.json
services/auth-service/src/main/resources/templates/email/email-verification-mail.html
services/auth-service/src/main/resources/templates/email/forgot-password-mail.html
services/auth-service/src/test/java/dev/edu/ngochandev/authservice/AbsIntegrationTest.java
services/auth-service/src/test/java/dev/edu/ngochandev/authservice/AuthIntegrationTest.java
services/auth-service/src/test/resources/application-test.properties
services/common-lib/pom.xml
services/common-lib/src/main/java/dev/edu/ngochandev/common/dtos/req/AdvancedFilterRequestDto.java
services/common-lib/src/main/java/dev/edu/ngochandev/common/dtos/req/SimpleFilterRequestDto.java
services/common-lib/src/main/java/dev/edu/ngochandev/common/dtos/res/ErrorResponseDto.java
services/common-lib/src/main/java/dev/edu/ngochandev/common/dtos/res/IntrospectTokenResponseDto.java
services/common-lib/src/main/java/dev/edu/ngochandev/common/dtos/res/PageResponseDto.java
services/common-lib/src/main/java/dev/edu/ngochandev/common/dtos/res/SuccessResponseDto.java
services/common-lib/src/main/java/dev/edu/ngochandev/common/enums/OperatorFilter.java
services/common-lib/src/main/java/dev/edu/ngochandev/common/events/UserRegisteredEvent.java
services/common-lib/src/main/java/dev/edu/ngochandev/common/exceptions/DateFormatException.java
services/common-lib/src/main/java/dev/edu/ngochandev/common/exceptions/DuplicateResourceException.java
services/common-lib/src/main/java/dev/edu/ngochandev/common/exceptions/ResourceNotFoundException.java
services/common-lib/src/main/java/dev/edu/ngochandev/common/exceptions/UnauthorizedException.java
services/common-lib/src/main/java/dev/edu/ngochandev/common/i18n/Translator.java
services/common-lib/src/main/resources/messages_common_vi.properties
services/common-lib/src/main/resources/messages_common.properties
services/gateway-service/.gitattributes
services/gateway-service/.gitignore
services/gateway-service/.mvn/wrapper/maven-wrapper.properties
services/gateway-service/mvnw
services/gateway-service/mvnw.cmd
services/gateway-service/pom.xml
services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/commons/GatewayConstants.java
services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/commons/Translator.java
services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/configs/AuthenticationFilter.java
services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/configs/AuthorizationFilter.java
services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/configs/BeanStorage.java
services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/configs/SecurityProperties.java
services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/configs/WebClientConfig.java
services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/dtos/req/AuthVerifyTokenRequestDto.java
services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/GatewayServiceApplication.java
services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/repositories/AuthClient.java
services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/services/AuthService.java
services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/services/impl/AuthServiceImpl.java
services/gateway-service/src/main/resources/application.yml
services/gateway-service/src/main/resources/messages_gateway_vi.properties
services/gateway-service/src/main/resources/messages_gateway.properties
services/gateway-service/src/test/java/dev/edu/ngochandev/gatewayservice/GatewayServiceApplicationTests.java
services/social-service/.gitattributes
services/social-service/.gitignore
services/social-service/.mvn/wrapper/maven-wrapper.properties
services/social-service/mvnw
services/social-service/mvnw.cmd
services/social-service/pom.xml
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/commons/enums/ConnectionStatus.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/commons/enums/Gender.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/config/InternalApiAuthFilter.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/config/LocalResolver.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/config/SecurityConfig.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/controllers/UserProfileController.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/dtos/req/UserProfileUpdateRequestDto.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/dtos/res/UserProfileResponseDto.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/entities/BaseNodeEntity.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/entities/ConnectionRelation.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/entities/UserProfileEntity.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/exceptions/GlobalExceptionHandler.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/kafka/consumers/UserEventConsumer.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/mappers/UserProfileMapper.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/repositories/UserProfileRepository.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/services/impl/UserProfileServiceImpl.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/services/UserProfileService.java
services/social-service/src/main/java/dev/edu/ngochandev/socialservice/SocialServiceApplication.java
services/social-service/src/main/resources/application.yml
services/social-service/src/main/resources/messages_social_vi.properties
services/social-service/src/main/resources/messages_social.properties
services/social-service/src/test/java/dev/edu/ngochandev/socialservice/SocialServiceApplicationTests.java

================================================================
Files
================================================================

================
File: .gitignore
================
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### IntelliJ IDEA ###
.idea/
*.iws
*.iml
*.ipr

### Eclipse ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

### Mac OS ###
.DS_Store

#env
env/
data/

================
File: docker-compose.yml
================
services:
  auth-db:
    image: postgres:16
    container_name: auth-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./data/auth:/var/lib/postgresql/data
      - ./data/auth/logs:/var/log/postgresql
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth-network

  social-db:
    image: neo4j:5.26.10-community-ubi9
    container_name: social-db
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH}
    ports:
      - "7474:7474"
      - "7687:7687"
    restart: always
    volumes:
      - ./data/social/data:/data
      - ./data/social/logs:/logs
      - ./data/social/plugins:/plugins
      - ./data/social/conf:/conf
    networks:
      - social-network
    healthcheck:
      test: [ "CMD-SHELL", "cypher-shell -u neo4j -p ${NEO4J_AUTH} 'RETURN 1'" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-service:
    image: bitnami/kafka:4.0.0
    container_name: kafka-service
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-service:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-service:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - '9094:9094'
    volumes:
      - ./data/kafka:/bitnami/kafka
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka-service:9092 --list" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
    - social-network
    - auth-network

networks:
  auth-network:
    driver: bridge
  social-network:
    driver: bridge

================
File: docs/auth-service.md
================
# 1. Vài điểm cần lưu ý
##   1.1 Nguyên tắc chung
  - Tầng `service` chỉ gọi `repository` của chính nó, cấm gọi repo của thằng khác (hoặc là cùng domain).
  - Mật khẩu thì tất nhiên là phải hash, không được lưu raw text trong DB.
##  1.2 Đặt tên cho nó chuẩn
- **Class**, **Entity**, **Service** các kiểu: Dùng `PascalCase`, nhớ là Số Ít. Ví dụ: `UserEntity`, `RoleRepository`. Đừng có `UsersEntity` nhé, một object là một thằng user thôi.
- **Table** trong DB: Dùng **snake_case**, và là Số **Nhiều**. Ví dụ: `tbl_users`, `tbl_roles_permissions`.
## 2. Cái trò phân quyền mới (RBAC Động)
  - Cái hệ thống phân quyền cũ hard-code trong code tù lắm, mỗi lần sửa lại phải build lại mệt người. Giờ tôi đổi rồi, nó sẽ tự động hết, ngon hơn nhiều.
<p align="center">
<img src="img_3.png" alt="Sơ đồ ERD" title="Sơ đồ ERD">
</p>

### Đây là cách nó chạy:
#### Khi app khởi động:
1. Thằng `DataInitializer` sẽ vào việc. Đầu tiên nó đọc `file src/main/resources/migrations/permissions.json`.
2. Nó sẽ so sánh file này với CSDL (bảng `tbl_permissions`) rồi tự động thêm, sửa, hoặc xóa mềm các quyền cho khớp. Giờ file permissions.json là "sếp", CSDL phải nghe theo. 
3. Tiếp theo, nó tạo/cập nhật 2 role cứng:
   1. `super_admin`: Được bem cho TẤT CẢ các quyền có trong hệ thống. Full mẹ nó quyền.
   2. `default_user`: Chỉ được cấp mấy quyền cơ bản cho người dùng mới đăng ký (là mấy quyền có "isDefault": true trong file json ấy).
   3. Cuối cùng, nó check xem đã có thằng `super_admin` nào chưa. Nếu chưa, nó sẽ tạo một tài khoản (info lấy từ file `application.yml`) và gán cho vai trò `super_admin`.
#### Khi gọi API:
   1. Thằng `PermissionFilter` nó sẽ chặn lại.
   2. Nó xem mình là ai, có những role gì. 
   3. Nó vào DB lôi hết permission của đống role đó ra.
   4. Nó so sánh cái API mình đang gọi (path + method) với đống permission mình có.
      1. Khớp: Ok mời vào.
      2. Không khớp: 403 Forbidden, `đi về nhà với góc vườn nhiều chó nhều gà`. 
#### Ngon ở chỗ nào?
   1. Muốn đổi quyền cho role? Vào API mà sửa, không cần đụng code.
   2. Muốn thêm/bớt một quyền của hệ thống? Cứ sửa file `permissions.json` rồi khởi động lại app là xong.
## Danh sách API
### Đám Public API (Công khai)
#### Mấy cái này thì không cần đăng nhập cũng gọi được.
#### 1. Đăng ký
- **Endpoint**: **POST** `/api/auth/register`
- **Để làm gì?:** Đăng ký user mới. Tự gán role `default_user` rồi `gửi mail bắt xác thực`.
- **Request**:
```json
{
  "username: "newuser",
  "fullName": "New User Name",
  "email": "newuser@example.com",
  "password": "password123"
}
```
- **Response** (OK thì nó ra vầy):
```json
{
  "status": 201,
  "message": "Đăng ký người dùng thành công, vui lòng xác minh email",
  "data": 15
}
```

#### 2. Đăng nhập
- **Endpoint**: **POST** `/api/auth/authenticate`
- **Để làm gì?**: Lấy token để đi gọi các API khác.
- **Request:**
```json
{
  "identifier": "superadmin",
  "password": "superadminpassword"
}
```
- **Response** (OK thì nó ra vầy):
```json
{
    "status": 200,
    "message": "Xác thực người dùng thành công",
    "data": {
        "accessToken": "ey...",
        "refreshToken": "ey..."
    }
}
```
#### 3. Làm mới Token
- **Endpoint**: **POST** `/api/auth/refresh-token`
- **Để làm gì?**: Dùng `refreshToken` cũ lấy `accessToken` mới.
- **Request**:
```json
{
  "token": "cái_refreshToken_cũ_dán_vào_đây"
}
```
#### 4. Đổi mật khẩu
- **Endpoint**: **PATCH** `/api/auth/change-password`
- **Lưu ý:** Cái này cần đăng nhập rồi mới gọi được (này cũng tuỳ business).
- **Request**:
```json
{
  "userId": 1,
  "oldPassword": "mật_khẩu_hiện_tại",
  "newPassword": "mật_khẩu_mới",
  "confirmPassword": "nhập_lại_mật_khẩu_mới"
}
```
#### (Các API quên mật khẩu, reset, xác thực email tương tự, không có gì đặc biệt)
### Đám API Quản lý User (Chỉ Admin mới được nghịch)
#### Mấy cái này phải có Bearer Token (_là cái accessToken đó_) với quyền ngon mới gọi được.
#### 1. Lấy danh sách user (có filter, search, xoắn não)
- **Endpoint**: **POST** `/api/v1/users/list`
- **Request**:
```json
{
  "filters": [
    { "field": "username", "operator": "contains", "value": "admin" },
    { "field": "status", "operator": "in", "value": ["ACTIVE", "INACTIVE"] }
  ],
  "sort": "createdAt:DESC",
  "page": 1,
  "size": 10
}
```
- **Response** (OK thì nó ra vầy):
```json
{
    "status": 200,
    "message": "Lấy thông tin người dùng thành công",
    "data": {
        "currentPage": 1,
        "totalElements": 1,
        "totalPages": 1,
        "items": [
            {
                "id": 1,
                "username": "superadmin",
                "fullName": "Super Administrator",
                "email": "super.admin@example.com",
                "status": "ACTIVE",
                "roles": [ { "id": 1, "name": "super_admin" } ]
            }
        ]
    }
}
```
#### 2. Tạo user (do Admin tạo)
- **Endpoint**: **POST** `/api/v1/users`
- **Request**:
```json
{
  "username": "staffuser",
  "fullName": "Staff User",
  "email": "staff@example.com",
  "password": "password123",
  "status": "ACTIVE",
  "roleIds": [2] 
}
```
#### 3. Sửa user
- **Endpoint**: **PUT** `/api/v1/users/update`
- **Request**:
```json
{
  "id": 15,
  "fullName": "Tên Mới Của User",
  "status": "BLOCKED",
  "roleIds": [2, 3] 
}
```
#### 4. Xóa 1 user
**Endpoint**: **DELETE** `/api/v1/users/{id}`
#### 5. Xóa cả đống user
- **Endpoint**: **DELETE** `/api/v1/users/batch`
- **Request**:
```json
{
  "ids": [15, 16, 17]
}
```

### Đám API Quản lý Role
#### Cũng cần quyền mới được sờ vào.
#### 1. Lấy danh sách role
- **Endpoint**: **POST** `/api/v1/roles/list`
2. Lấy chi tiết 1 role (xem nó có những quyền gì)
- **Endpoint**: **GET** **/api/v1/roles/{id}**
- **Response** (OK thì nó ra vầy):
```json
{
  "status": 200,
  "message": "Lấy thông tin vai trò thành công",
  "data": {
    "id": 1,
    "name": "super_admin",
    "description": "Full system access",
    "permissions": [
      { "id": 1, "name": "Đổi mật khẩu người dùng", ... },
      { "id": 2, "name": "Làm mới token người dùng", ... }
    ]
  }
}
```
#### 3. Tạo role mới
- **Endpoint**: **POST** `/api/v1/roles`
- **Request:**
```json
{
  "name": "Content Manager",
  "description": "Chỉ được sửa bài viết thôi",
  "permissionIds": [1, 5, 8, 12]
}
```

#### (Xóa 1 role, xóa nhiều role tương tự như User)
### API Quản lý Quyền
#### 1. Lấy danh sách quyền
- **Endpoint**: **POST** `/api/v1/permissions/list`
- **Để làm gì?**: Chỉ để xem hệ thống có những quyền gì thôi (lấy từ file `permissions.json` ra). API này chỉ để `READ-ONLY`. Không có tạo, sửa, xóa gì ở đây hết.
- Request:
```json
{
  "page": 1,
  "size": 10,
  "search": "user"
}
```

================
File: docs/social-service.md
================
# Profile Service

## User Profile Service Entity
- Tên người dùng
- ảnh đại diện
- ngày sinh
- giới tính
- số điện thoại
- trường học
- social media links
- Các thông tin audit khác (ngày tạo, ngày cập nhật, người tạo, người cập nhật...)

## Các chức năng của profile service
- Quản lý thông tin cá nhân của người dùng
- Kết bạn với user khác
- Tạo và quản lý nhóm, bạn bè

### API Endpoints
### Tạo profile người dùng
#### Luồng hoạt động
![img_2.png](img_2.png)
#### Vấn đề phát sinh
1. Gửi request tạo profile từ Auth-Service -> Social-Service như thế nào?
- Ta sẽ dùng 1 message queue (`Kafka`) để gửi request từ `Auth-Service` -> `Social-Service`.
2. Nếu gửi message Kafka thành công, nhưng transaction của DB bị rollback thì sao?
- Giải pháp là ta sẽ đảm bảo message chỉ được gửi đi khi và chỉ khi transaction ghi vào cơ sở dữ liệu đã thành công (commit).
- sử dụng `TransactionalEventListener` để đảm bảo rằng sự kiện chỉ được phát hành sau khi giao dịch đã được cam kết thành công.

### get profile người dùng
- `GET` `/api/v1/profile/me`
- Lấy thông tin profile của người dùng đã đăng nhập.

### Cập nhật profile người dùng
- `PATCH` `/api/v1/profile/me`  
- Cập nhật thông tin cá nhân của người dùng đã đăng nhập.
- Ta sẽ lấy thông tin userid từ jwt ra để cập nhật

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.4</version>
        <relativePath/>
    </parent>
    <groupId>dev.edu.ngochandev</groupId>
    <artifactId>elearning-platform</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <modules>
        <module>services/auth-service</module>
        <module>services/social-service</module>
        <module>services/common-lib</module>
        <module>services/gateway-service</module>
    </modules>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <org.mapstruct.version>1.6.3</org.mapstruct.version>
        <springdoc-openapi.version>2.8.9</springdoc-openapi.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>dev.edu.ngochandev</groupId>
                <artifactId>common-library</artifactId>
                <version>${project.version}</version>
            </dependency>

            <!-- MapStruct -->
            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct</artifactId>
                <version>${org.mapstruct.version}</version>
            </dependency>

            <!-- Swagger ui docs -->
            <dependency>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
                <version>${springdoc-openapi.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <!--        Lombok-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.11.0</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <annotationProcessorPaths>
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombok.version}</version>
                            </path>
                            <path>
                                <groupId>org.mapstruct</groupId>
                                <artifactId>mapstruct-processor</artifactId>
                                <version>${org.mapstruct.version}</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>

================
File: services/auth-service/.gitattributes
================
/mvnw text eol=lf
*.cmd text eol=crlf

================
File: services/auth-service/.gitignore
================
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

================
File: services/auth-service/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>dev.edu.ngochandev</groupId>
        <artifactId>elearning-platform</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>./../../pom.xml</relativePath>
    </parent>
    <artifactId>auth-service</artifactId>
    <name>auth-service</name>
    <description>auth-service</description>
    <dependencies>
        <!--        Maptruct-->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
        </dependency>
<!--        Common library-->
        <dependency>
            <groupId>dev.edu.ngochandev</groupId>
            <artifactId>common-lib</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
<!--        Spring crypto-->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-crypto</artifactId>
        </dependency>
<!--        JPA-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
<!--        Spring web-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
<!--        PostgresSQL-->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
<!--        Security-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
        </dependency>
<!--        Java mail-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
<!--        Thyme leaf-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
<!--        Test container-->
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <version>1.19.8</version>
            <scope>test</scope>
        </dependency>
<!--        Jupiter-->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.10.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>1.21.3</version>
            <scope>test</scope>
        </dependency>
        <!--        Spring test-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
        <!--        Validation-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!--        Heath Check-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
<!--        Swagger-->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
        </plugins>
    </build>

</project>

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/AuthServiceApplication.java
================
package dev.edu.ngochandev.authservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;

@SpringBootApplication
@EnableJpaAuditing
@ComponentScan(basePackages = {"dev.edu.ngochandev.authservice", "dev.edu.ngochandev.common"})
public class AuthServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(AuthServiceApplication.class, args);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/DataInitializer.java
================
package dev.edu.ngochandev.authservice.commons;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import dev.edu.ngochandev.authservice.commons.enums.HttpMethod;
import dev.edu.ngochandev.authservice.commons.enums.UserStatus;
import dev.edu.ngochandev.authservice.entities.*;
import dev.edu.ngochandev.authservice.repositories.*;
import java.io.InputStream;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.io.ClassPathResource;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@Slf4j(topic = "DATA-INITIALIZER")
public class DataInitializer implements CommandLineRunner {
    public static final String DEFAULT_ROLE = "default_user";
    public static final String SUPER_ADMIN_ROLE = "super_admin";

    private final RoleRepository roleRepository;
    private final PermissionRepository permissionRepository;
    private final RolePermissionRepository rolePermissionRepository;
    private final UserRepository userRepository;
    private final UserRoleRepository userRoleRepository;
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final PasswordEncoder passwordEncoder;

    @Value("${app.super-admin.username}")
    private String superAdminUsername;

    @Value("${app.super-admin.password}")
    private String superAdminPassword;

    @Value("${app.super-admin.email}")
    private String superAdminEmail;

    @Value("${app.super-admin.full-name}")
    private String superAdminFullName;

    @Override
    public void run(String... args) throws Exception {
        log.info("===== Starting Data Initialization =====");
        synchronizePermissionsFromFile();
        synchronizeCoreRoles();
        createSuperAdminUser();
        log.info("===== Data Initialization Finished =====");
    }

    private void synchronizePermissionsFromFile() throws RuntimeException {
        log.info("Step 1: Synchronizing permissions from 'permissions.json'...");
        try (InputStream inputStream = new ClassPathResource("migrations/permissions.json").getInputStream()) {
            List<PermissionMigrationDto> permissionsFromFile =
                    objectMapper.readValue(inputStream, new TypeReference<>() {});

            Map<String, PermissionEntity> existingPermissionsMap = permissionRepository.findAll().stream()
                    .collect(Collectors.toMap(p -> p.getMethod().name() + ":" + p.getApiPath(), Function.identity()));

            for (PermissionMigrationDto dto : permissionsFromFile) {
                String key = dto.getMethod() + ":" + dto.getApiPath();
                String translatedName = dto.getNameKey();

                PermissionEntity existingPermission = existingPermissionsMap.remove(key);

                if (existingPermission == null) {
                    PermissionEntity newPermission = new PermissionEntity();
                    newPermission.setName(translatedName);
                    newPermission.setApiPath(dto.getApiPath());
                    newPermission.setMethod(HttpMethod.valueOf(dto.getMethod()));
                    newPermission.setModule(dto.getModule());
                    permissionRepository.save(newPermission);
                    log.info("  -> CREATED Permission: [{} {}]", dto.getMethod(), dto.getApiPath());
                } else {
                    boolean needsUpdate = !existingPermission.getName().equals(translatedName)
                            || !existingPermission.getModule().equals(dto.getModule());
                    if (needsUpdate) {
                        existingPermission.setName(translatedName);
                        existingPermission.setModule(dto.getModule());
                        permissionRepository.save(existingPermission);
                        log.info("  -> UPDATED Permission: [{} {}]", dto.getMethod(), dto.getApiPath());
                    }
                }
            }

            if (!existingPermissionsMap.isEmpty()) {
                log.warn("  -> Found {} obsolete permissions to be DELETED (soft).", existingPermissionsMap.size());
                for (PermissionEntity obsoletePermission : existingPermissionsMap.values()) {
                    obsoletePermission.setIsDeleted(true);
                    permissionRepository.save(obsoletePermission);
                    log.info(
                            "  -> DELETED (Soft) Permission: [{} {}]",
                            obsoletePermission.getMethod(),
                            obsoletePermission.getApiPath());
                }
            }
            log.info("Step 1: Finished synchronizing permissions.");

        } catch (Exception e) {
            log.error("FATAL: Failed to synchronize permissions from file.", e);
            throw new RuntimeException(e);
        }
    }

    private void synchronizeCoreRoles() {
        log.info("Step 2: Synchronizing core roles (super_admin, default_user)...");

        // 1. Check role existence, if not found then create new
        roleRepository.findByName(SUPER_ADMIN_ROLE).orElseGet(() -> {
            log.info("  -> Role '{}' not found. Creating it.", SUPER_ADMIN_ROLE);
            return roleRepository.save(RoleEntity.builder()
                    .name(SUPER_ADMIN_ROLE)
                    .description("Full system access")
                    .build());
        });
        // 2. allways fetch role with permissions using JOIN FETCH
        RoleEntity superAdminRole = roleRepository
                .findByNameWithPermissions(SUPER_ADMIN_ROLE)
                .orElseThrow(() -> new RuntimeException("CRITICAL: Failed to create or find Super Admin Role!"));
        // 3. get all permissions and assign to super admin role
        List<PermissionEntity> allPermissions = permissionRepository.findAll();
        assignPermissionsToRole(superAdminRole, allPermissions);

        roleRepository.findByName(DEFAULT_ROLE).orElseGet(() -> {
            log.info("  -> Role '{}' not found. Creating it.", DEFAULT_ROLE);
            return roleRepository.save(RoleEntity.builder()
                    .name(DEFAULT_ROLE)
                    .description("Default permissions for new users")
                    .build());
        });
        RoleEntity defaultUserRole = roleRepository
                .findByNameWithPermissions(DEFAULT_ROLE)
                .orElseThrow(() -> new RuntimeException("CRITICAL: Failed to create or find Default User Role!"));
        List<PermissionEntity> defaultPermissions = findDefaultPermissions();
        assignPermissionsToRole(defaultUserRole, defaultPermissions);

        log.info("Step 2: Finished synchronizing core roles.");
    }

    private List<PermissionEntity> findDefaultPermissions() {
        try (InputStream inputStream = new ClassPathResource("migrations/permissions.json").getInputStream()) {
            List<PermissionMigrationDto> allDtos = objectMapper.readValue(inputStream, new TypeReference<>() {});
            Set<String> defaultPermissionKeys = allDtos.stream()
                    .filter(PermissionMigrationDto::isDefault)
                    .map(dto -> dto.getMethod() + ":" + dto.getApiPath())
                    .collect(Collectors.toSet());

            return permissionRepository.findAll().stream()
                    .filter(p -> defaultPermissionKeys.contains(p.getMethod().name() + ":" + p.getApiPath()))
                    .toList();
        } catch (Exception e) {
            log.error("FATAL: Could not read 'permissions.json' to determine default permissions.", e);
            return List.of();
        }
    }

    private void assignPermissionsToRole(RoleEntity role, List<PermissionEntity> permissionsToAssign) {
        Set<Long> existingPermissionIds = role.getRolePermissions().stream()
                .map(rp -> rp.getPermission().getId())
                .collect(Collectors.toSet());

        Set<Long> permissionsToAssignIds =
                permissionsToAssign.stream().map(PermissionEntity::getId).collect(Collectors.toSet());

        List<RolePermissionEntity> newAssignments = permissionsToAssign.stream()
                .filter(p -> !existingPermissionIds.contains(p.getId()))
                .map(p -> {
                    RolePermissionEntity assignment = new RolePermissionEntity();
                    assignment.setRole(role);
                    assignment.setPermission(p);
                    return assignment;
                })
                .toList();

        if (!newAssignments.isEmpty()) {
            rolePermissionRepository.saveAll(newAssignments);
            log.info("  -> Assigned {} new permissions to role '{}'.", newAssignments.size(), role.getName());
        }

        Set<RolePermissionEntity> assignmentsToRemove = role.getRolePermissions().stream()
                .filter(rp ->
                        !permissionsToAssignIds.contains(rp.getPermission().getId()))
                .collect(Collectors.toSet());

        if (!assignmentsToRemove.isEmpty()) {
            rolePermissionRepository.deleteAll(assignmentsToRemove);
            log.warn(
                    "  -> Removed {} obsolete permissions from role '{}'.", assignmentsToRemove.size(), role.getName());
        }
    }

    private void createSuperAdminUser() {
        log.info("Step 3: Creating Super Admin user if not exists...");
        if (!userRepository.existsByUsername(superAdminUsername)) {
            RoleEntity superAdminRole = roleRepository
                    .findByNameWithPermissions(SUPER_ADMIN_ROLE)
                    .orElseThrow(() -> new RuntimeException("CRITICAL: Super Admin Role not found!"));

            UserEntity adminUser = UserEntity.builder()
                    .username(superAdminUsername)
                    .password(passwordEncoder.encode(superAdminPassword))
                    .email(superAdminEmail)
                    .fullName(superAdminFullName)
                    .status(UserStatus.ACTIVE)
                    .build();
            userRepository.save(adminUser);

            UserRoleEntity userRole = new UserRoleEntity();
            userRole.setUser(adminUser);
            userRole.setRole(superAdminRole);
            userRoleRepository.save(userRole);

            log.info("  -> CREATED Super Admin user '{}'.", superAdminUsername);
        } else {
            log.info("  -> Super Admin user '{}' already exists. Skipping creation.", superAdminUsername);
        }
        log.info("Step 3: Finished Super Admin user check.");
    }

    @Data
    private static class PermissionMigrationDto {
        private String nameKey;
        private String apiPath;
        private String method;
        private String module;

        @JsonProperty("isDefault")
        private boolean isDefault = false;
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/HttpMethod.java
================
package dev.edu.ngochandev.authservice.commons.enums;

public enum HttpMethod {
    GET,
    POST,
    PUT,
    DELETE,
    PATCH,
    HEAD,
    OPTIONS,
    TRACE;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/MailStatus.java
================
package dev.edu.ngochandev.authservice.commons.enums;

import lombok.Getter;

@Getter
public enum MailStatus {
    PENDING("pending"),
    SENT("sent"),
    FAILED("failed");

    private final String status;

    MailStatus(String status) {
        this.status = status;
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/MailType.java
================
package dev.edu.ngochandev.authservice.commons.enums;

import lombok.Getter;

@Getter
public enum MailType {
    FORGOT_PASSWORD("forgot-password"),
    RESET_PASSWORD("reset-password"),
    ACCOUNT_ACTIVATION("account-activation"),
    EMAIL_VERIFICATION("email-verification");

    private final String type;

    MailType(String type) {
        this.type = type;
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/TokenType.java
================
package dev.edu.ngochandev.authservice.commons.enums;

public enum TokenType {
    ACCESS_TOKEN,
    FORGOT_PASSWORD_TOKEN,
    REFRESH_TOKEN,
    EMAIL_VERIFICATION_TOKEN,
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/enums/UserStatus.java
================
package dev.edu.ngochandev.authservice.commons.enums;

public enum UserStatus {
    ACTIVE,
    INACTIVE,
    BLOCKED,
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/commons/MyUtils.java
================
package dev.edu.ngochandev.authservice.commons;

import dev.edu.ngochandev.common.dtos.req.SimpleFilterRequestDto;
import dev.edu.ngochandev.common.exceptions.DateFormatException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

public class MyUtils {
    public static LocalDateTime parseFlexibleDate(String date) {
        try {
            return LocalDateTime.parse(date, DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss"));
        } catch (DateTimeParseException e) {
            throw new DateFormatException("error.date.invalid");
        }
    }

    public static <T extends SimpleFilterRequestDto> Pageable createPageable(T filter) {
        // sort
        String[] sort = filter.getSort().split(":");
        String sortField = sort[0];
        Sort.Direction direction = sort[1].equalsIgnoreCase("asc") ? Sort.Direction.ASC : Sort.Direction.DESC;
        // pageable
        int page = filter.getPage() > 0 ? filter.getPage() - 1 : 0;
        int size = filter.getSize();

        return PageRequest.of(page, size, Sort.by(direction, sortField));
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/AuditorAwareConfig.java
================
package dev.edu.ngochandev.authservice.configs;

import java.util.Objects;
import java.util.Optional;

import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.AuditorAware;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;
import org.springframework.stereotype.Component;

@Component
@Slf4j
public class AuditorAwareConfig implements AuditorAware<Long> {
    @Override
    public Optional<Long> getCurrentAuditor() {
        return Optional.ofNullable(SecurityContextHolder.getContext().getAuthentication())
                .filter(auth -> auth.isAuthenticated() && auth instanceof JwtAuthenticationToken)
                .map(JwtAuthenticationToken.class::cast)
                .map(JwtAuthenticationToken::getTokenAttributes)
                .map(attrs -> attrs.get("userId"))
                .map(userId -> {
                    if (userId instanceof Number number) {
                        return number.longValue();
                    } else if (userId instanceof String str) {
                        return Long.valueOf(str);
                    }
                    return -1L;
                });
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/BeanStorage.java
================
package dev.edu.ngochandev.authservice.configs;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.util.AntPathMatcher;

@Configuration
public class BeanStorage {
    @Bean
    public String[] publicEndpoints() {
        return new String[] {
            "/api/auth/register",
            "/api/auth/authenticate",
            "/api/auth/reset-password",
            "/api/auth/forgot-password",
            "/api/auth/verify-email",
            "/swagger-ui/**",
            "/v3/api-docs/**",
                "/api/auth/internal/verify-token"
        };
    }

    @Bean
    public AntPathMatcher antPathMatcher() {
        return new AntPathMatcher();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(10);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/CustomJwtDecoder.java
================
package dev.edu.ngochandev.authservice.configs;

import com.nimbusds.jose.JWSAlgorithm;
import com.nimbusds.jwt.JWT;
import com.nimbusds.jwt.SignedJWT;
import dev.edu.ngochandev.authservice.repositories.InvalidatedTokenRepository;
import dev.edu.ngochandev.authservice.services.JwtService;
import jakarta.annotation.PostConstruct;
import java.text.ParseException;
import javax.crypto.spec.SecretKeySpec;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.oauth2.jose.jws.MacAlgorithm;
import org.springframework.security.oauth2.jwt.*;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@Slf4j
public class CustomJwtDecoder implements JwtDecoder {
    @Override
    public Jwt decode(String token) {
        try {
            SignedJWT signedJWT = SignedJWT.parse(token);
            return new Jwt(token, signedJWT.getJWTClaimsSet().getIssueTime().toInstant(),
                    signedJWT.getJWTClaimsSet().getExpirationTime().toInstant(),
                    signedJWT.getHeader().toJSONObject(), signedJWT.getJWTClaimsSet().getClaims());
        } catch (ParseException e) {
            throw new BadJwtException("error.token.invalid");
        }
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/InternalApiAuthFilter.java
================
package dev.edu.ngochandev.authservice.configs;

import com.fasterxml.jackson.databind.ObjectMapper;
import dev.edu.ngochandev.common.dtos.res.ErrorResponseDto;
import dev.edu.ngochandev.common.i18n.Translator;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
@RequiredArgsConstructor
public class InternalApiAuthFilter extends OncePerRequestFilter {
    @Value("${app.security.internal-secret-key}")
    private String internalSecret;
    private final ObjectMapper objectMapper;
    private final Translator translator;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        String requestURI = request.getRequestURI();
        if(!requestURI.contains("internal")){
            filterChain.doFilter(request, response);
            return;
        }
        String authHeader = request.getHeader("X-Internal-Secret");

        if (authHeader == null || !authHeader.equals(internalSecret)) {
            response.setStatus(HttpStatus.UNAUTHORIZED.value());
            response.setContentType(MediaType.APPLICATION_JSON_VALUE);

            ErrorResponseDto errorResponse = new ErrorResponseDto();
            errorResponse.setStatus(HttpStatus.UNAUTHORIZED.value());
            errorResponse.setError(HttpStatus.UNAUTHORIZED.getReasonPhrase());
            errorResponse.setMessage(translator.translate("error.unauthorized"));
            errorResponse.setPath(requestURI);
            response.setCharacterEncoding("UTF-8");
            response.getWriter().write(objectMapper.writeValueAsString(errorResponse));
            return;
        }
        filterChain.doFilter(request, response);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/LocalResolver.java
================
package dev.edu.ngochandev.authservice.configs;

import jakarta.servlet.http.HttpServletRequest;
import java.util.List;
import java.util.Locale;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.util.StringUtils;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;

@Configuration
public class LocalResolver extends AcceptHeaderLocaleResolver implements WebMvcConfigurer {
    @Override
    public Locale resolveLocale(HttpServletRequest request) {
        String language = request.getHeader("Accept-Language");
        List<Locale> listLocale = List.of(new Locale("en", "US"), new Locale("vi", "VN"));
        return StringUtils.hasLength(language)
                ? Locale.lookup(Locale.LanguageRange.parse(language), listLocale)
                : Locale.getDefault();
    }

    @Bean
    public ResourceBundleMessageSource messageSource() {
        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
        messageSource.setBasenames("messages_auth", "messages_common");
        messageSource.setDefaultEncoding("UTF-8");
        messageSource.setCacheSeconds(3600);
        return messageSource;
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/OpenApiConfig.java
================
package dev.edu.ngochandev.authservice.configs;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import java.util.List;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class OpenApiConfig {
    private static final String SECURITY_SCHEME_NAME = "bearerAuth";
    private static final String LICENSE_NAME = "Apache 2.0";
    private static final String LICENSE_URL = "https://springdoc.org";
    private static final String API_DESCRIPTION = "API documents for Auth service";

    @Value("${openapi.service.title}")
    private String title;

    @Value("${openapi.service.version}")
    private String version;

    @Value("${openapi.service.server}")
    private String serverUrl;

    @Bean
    public OpenAPI openAPI() {
        return new OpenAPI()
                .servers(createServers())
                .components(createComponents())
                .security(createSecurityRequirements())
                .info(createApiInfo());
    }

    private List<Server> createServers() {
        return List.of(new Server().url(serverUrl));
    }

    private Components createComponents() {
        Components components = new Components();
        components.addSecuritySchemes(SECURITY_SCHEME_NAME, createSecurityScheme());
        return components;
    }

    private SecurityScheme createSecurityScheme() {
        return new SecurityScheme()
                .type(SecurityScheme.Type.HTTP)
                .scheme("bearer")
                .bearerFormat("JWT");
    }

    private List<SecurityRequirement> createSecurityRequirements() {
        return List.of(new SecurityRequirement().addList(SECURITY_SCHEME_NAME));
    }

    private Info createApiInfo() {
        return new Info()
                .title(title)
                .description(API_DESCRIPTION)
                .version(version)
                .license(createLicense());
    }

    private License createLicense() {
        return new License().name(LICENSE_NAME).url(LICENSE_URL);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/configs/SecurityConfig.java
================
package dev.edu.ngochandev.authservice.configs;

import com.fasterxml.jackson.databind.ObjectMapper;
import dev.edu.ngochandev.authservice.exceptions.CustomAccessDeniedHandler;
import dev.edu.ngochandev.common.dtos.res.ErrorResponseDto;
import dev.edu.ngochandev.common.i18n.Translator;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpStatus;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;
import org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@RequiredArgsConstructor
public class SecurityConfig {
    private final CustomJwtDecoder jwtDecoder;
    private final String[] publicEndpoints;
    private final CustomAccessDeniedHandler customAccessDeniedHandler;
    private final Translator translator;
    private final InternalApiAuthFilter internalApiAuthFilter;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(auth ->
                    auth.requestMatchers(publicEndpoints)
                            .permitAll()
                            .anyRequest()
                            .authenticated()
                )
                .exceptionHandling(ex -> {
                    ex.authenticationEntryPoint(authenticationEntryPoint());
                    ex.accessDeniedHandler(customAccessDeniedHandler);
                })
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .httpBasic(AbstractHttpConfigurer::disable)
                .oauth2ResourceServer(oauth2 ->
                    oauth2.jwt(jwtConfigurer -> jwtConfigurer
                            .decoder(jwtDecoder)
                            .jwtAuthenticationConverter(this.jwtAuthenticationConverter()))
                ).addFilterBefore(internalApiAuthFilter, BearerTokenAuthenticationFilter.class);
        return http.build();
    }

    @Bean
    public JwtAuthenticationConverter jwtAuthenticationConverter() {
        JwtGrantedAuthoritiesConverter jwtGrantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();
        jwtGrantedAuthoritiesConverter.setAuthorityPrefix("");

        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();
        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter);

        return jwtAuthenticationConverter;
    }

    @Bean
    AuthenticationEntryPoint authenticationEntryPoint() {
        return (request, response, authException) -> {
            String message = authException.getMessage();
            if (message.contains("Jwt expired")) {
                message = translator.translate("error.token.expired");
            } else {
                message = translator.translate("error.token.invalid");
            }
            ErrorResponseDto errorResponse = new ErrorResponseDto(HttpStatus.UNAUTHORIZED, message, null);
            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            response.getWriter().write(new ObjectMapper().writeValueAsString(errorResponse));
        };
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/controllers/AuthController.java
================
package dev.edu.ngochandev.authservice.controllers;

import com.nimbusds.jose.JOSEException;
import dev.edu.ngochandev.authservice.dtos.req.AuthVerifyTokenRequestDto;
import dev.edu.ngochandev.authservice.dtos.req.*;
import dev.edu.ngochandev.authservice.dtos.res.TokenResponseDto;
import dev.edu.ngochandev.authservice.services.AuthService;
import dev.edu.ngochandev.common.dtos.res.IntrospectTokenResponseDto;
import dev.edu.ngochandev.common.dtos.res.SuccessResponseDto;
import dev.edu.ngochandev.common.i18n.Translator;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.extensions.Extension;
import io.swagger.v3.oas.annotations.extensions.ExtensionProperty;
import io.swagger.v3.oas.annotations.security.SecurityRequirements;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import java.text.ParseException;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

@Tag(name = "AUTH-CONTROLLER", description = "Manages user authentication and registration")
@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {
    private final AuthService userService;
    private final Translator translator;

    @PostMapping("/internal/verify-token")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "Verify Token",
            description = "Verifies the provided authentication token, note: this endpoint must be called by the gateway service to verify the token before allowing access to protected resources."
    )
    @SecurityRequirements
    public SuccessResponseDto<IntrospectTokenResponseDto> verifyToken(@RequestBody @Valid AuthVerifyTokenRequestDto req)  {
        return SuccessResponseDto.<IntrospectTokenResponseDto>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.verify-token.success"))
                .data(userService.verifyToken(req))
                .build();
    }

    @PostMapping("/register")
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(summary = "Register a new user", description = "Registers a new user with the provided details.")
    @SecurityRequirements
    public SuccessResponseDto<Long> register(@RequestBody @Valid UserRegisterRequestDto req) throws JOSEException {
        return SuccessResponseDto.<Long>builder()
                .status(HttpStatus.CREATED.value())
                .message(translator.translate("user.register.success"))
                .data(userService.register(req))
                .build();
    }

    @PostMapping("/authenticate")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "Authenticate user", description = "Authenticates a user with the provided credentials.")
    @SecurityRequirements
    public SuccessResponseDto<TokenResponseDto> login(@RequestBody @Valid AuthenticationRequestDto req)
            throws JOSEException, ParseException {
        return SuccessResponseDto.<TokenResponseDto>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.authenticate.success"))
                .data(userService.authenticate(req))
                .build();
    }

    @PatchMapping("/change-password")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "permission.user.change-password",
            description = "Changes the password for the authenticated user.",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "user")})
            })
    public SuccessResponseDto<Long> changePassword(@RequestBody @Valid UserChangePasswordRequestDto req) {
        return SuccessResponseDto.<Long>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.change-password.success"))
                .data(userService.changePassword(req))
                .build();
    }

    @PostMapping("/refresh-token")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "permission.user.refresh-token",
            description = "Refreshes the authentication token for the user.",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "user")})
            })
    public SuccessResponseDto<TokenResponseDto> refreshToken(@RequestBody @Valid AuthRefreshTokenRequestDto req)
            throws JOSEException, ParseException {
        return SuccessResponseDto.<TokenResponseDto>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.refresh-token.success"))
                .data(userService.refreshToken(req))
                .build();
    }

    @PostMapping("/logout")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "permission.user.logout",
            description = "Logs out the user by invalidating their authentication token.",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "user")})
            })
    public SuccessResponseDto<String> logout(@RequestBody @Valid AuthLogoutRequestDto req)
            throws ParseException, JOSEException {
        return SuccessResponseDto.<String>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.logout.success"))
                .data(userService.logout(req))
                .build();
    }

    @PostMapping("/forgot-password")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "Forgot Password",
            description = "Initiates the forgot password process for a user by sending a reset link to their email.")
    @SecurityRequirements
    public SuccessResponseDto<Boolean> forgotPassword(@RequestBody @Valid UserForgotPasswordRequestDto req)
            throws ParseException, JOSEException {
        return SuccessResponseDto.<Boolean>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.forgot-password.success"))
                .data(userService.forgotPassword(req))
                .build();
    }

    @PostMapping("/reset-password")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "Reset Password", description = "Resets the password for a user using a reset token.")
    @SecurityRequirements
    public SuccessResponseDto<Boolean> resetPassword(@RequestBody @Valid UserResetPasswordRequestDto req)
            throws ParseException, JOSEException {
        return SuccessResponseDto.<Boolean>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.reset-password.success"))
                .data(userService.resetPassword(req))
                .build();
    }

    @PostMapping("/verify-email")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "Verify Email", description = "Verifies a user's email address using a verification token.")
    @SecurityRequirements
    public SuccessResponseDto<Boolean> verifyEmail(@RequestBody @Valid UserVerifyEmailRequestDto req)
            throws ParseException, JOSEException {
        return SuccessResponseDto.<Boolean>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.verify-email.success"))
                .data(userService.verifyEmail(req))
                .build();
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/controllers/PermissionController.java
================
package dev.edu.ngochandev.authservice.controllers;

import dev.edu.ngochandev.common.dtos.req.SimpleFilterRequestDto;
import dev.edu.ngochandev.authservice.dtos.res.PermissionResponseDto;
import dev.edu.ngochandev.authservice.services.PermissionService;
import dev.edu.ngochandev.common.dtos.res.PageResponseDto;
import dev.edu.ngochandev.common.dtos.res.SuccessResponseDto;
import dev.edu.ngochandev.common.i18n.Translator;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.extensions.Extension;
import io.swagger.v3.oas.annotations.extensions.ExtensionProperty;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/permissions")
@RequiredArgsConstructor
@Tag(name = "PERMISSION-CONTROLLER", description = "Manages permissions for users and roles")
public class PermissionController {
    private final PermissionService permissionService;
    private final Translator translator;

    @PostMapping("/list")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "permission.permission-list",
            description = "Lists all permissions based on the provided filter.",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "permission")})
            })
    public SuccessResponseDto<PageResponseDto<PermissionResponseDto>> getAllPermissions(
            @RequestBody @Valid SimpleFilterRequestDto filter) {
        return SuccessResponseDto.<PageResponseDto<PermissionResponseDto>>builder()
                .status(HttpStatus.OK.value())
                .data(permissionService.getAllPermissions(filter))
                .message(translator.translate("permission.list.success"))
                .build();
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/controllers/RoleController.java
================
package dev.edu.ngochandev.authservice.controllers;

import dev.edu.ngochandev.authservice.dtos.req.RoleCreateRequestDto;
import dev.edu.ngochandev.authservice.dtos.req.RoleManyDeleteRequestDto;
import dev.edu.ngochandev.common.dtos.req.SimpleFilterRequestDto;
import dev.edu.ngochandev.authservice.dtos.res.RoleDetailResponseDto;
import dev.edu.ngochandev.authservice.dtos.res.RoleSummaryResponseDto;
import dev.edu.ngochandev.authservice.services.RoleService;
import dev.edu.ngochandev.common.dtos.res.PageResponseDto;
import dev.edu.ngochandev.common.dtos.res.SuccessResponseDto;
import dev.edu.ngochandev.common.i18n.Translator;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.extensions.Extension;
import io.swagger.v3.oas.annotations.extensions.ExtensionProperty;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/roles")
@RequiredArgsConstructor
@Tag(name = "ROLE-CONTROLLER", description = "Manages roles and their permissions")
public class RoleController {
    private final RoleService roleService;
    private final Translator translator;

    @PostMapping("/list")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "permission.role.list",
            description = "Lists all permissions based on the provided filter.",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "role")})
            })
    public SuccessResponseDto<PageResponseDto<RoleSummaryResponseDto>> listRoles(
            @RequestBody @Valid SimpleFilterRequestDto filter) {
        return SuccessResponseDto.<PageResponseDto<RoleSummaryResponseDto>>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("role.list.success"))
                .data(roleService.getAllRoles(filter))
                .build();
    }

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(
            summary = "permission.role.create",
            description = "Lists all permissions based on the provided filter.",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "role")})
            })
    public SuccessResponseDto<Long> createRole(@RequestBody @Valid RoleCreateRequestDto req) {
        return SuccessResponseDto.<Long>builder()
                .status(HttpStatus.CREATED.value())
                .message(translator.translate("role.create.success"))
                .data(roleService.createRole(req))
                .build();
    }

    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "permission.role.get-detail",
            description = "Get role by ID.",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "role")})
            })
    public SuccessResponseDto<RoleDetailResponseDto> getRoleById(@PathVariable Long id) {
        return SuccessResponseDto.<RoleDetailResponseDto>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("role.get.success"))
                .data(roleService.getRoleById(id))
                .build();
    }

    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "permission.role.delete",
            description = "Delete role by ID.",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "role")})
            })
    public SuccessResponseDto<Long> deleteRoleById(@PathVariable Long id) {
        return SuccessResponseDto.<Long>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("role.delete.success"))
                .data(roleService.deleteRoleById(id))
                .build();
    }

    @DeleteMapping("/batch")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "permission.role.delete-many",
            description = "Delete multiple roles by their IDs.",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "role")})
            })
    public SuccessResponseDto<Void> deleteRolesByIds(@RequestBody RoleManyDeleteRequestDto req) {
        roleService.deleteManyRoles(req);
        return SuccessResponseDto.<Void>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("role.delete.success"))
                .build();
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/controllers/UserController.java
================
package dev.edu.ngochandev.authservice.controllers;

import dev.edu.ngochandev.authservice.dtos.req.AdminUserCreateRequestDto;
import dev.edu.ngochandev.common.dtos.req.AdvancedFilterRequestDto;
import dev.edu.ngochandev.authservice.dtos.req.UserManyDeleteRequestDto;
import dev.edu.ngochandev.authservice.dtos.req.UserUpdateRequestDto;
import dev.edu.ngochandev.authservice.dtos.res.AdminUserResponse;
import dev.edu.ngochandev.authservice.services.UserService;
import dev.edu.ngochandev.common.dtos.res.PageResponseDto;
import dev.edu.ngochandev.common.dtos.res.SuccessResponseDto;
import dev.edu.ngochandev.common.i18n.Translator;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.extensions.Extension;
import io.swagger.v3.oas.annotations.extensions.ExtensionProperty;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/users")
@RequiredArgsConstructor
@Tag(name = "USER-CONTROLLER", description = "User management operations")
public class UserController {
    private final UserService userService;
    private final Translator translator;

    @PostMapping("/list")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "permission.user.list",
            description = "List users with advanced filtering",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "user")})
            })
    public SuccessResponseDto<PageResponseDto<AdminUserResponse>> listUsers(
            @RequestBody @Valid AdvancedFilterRequestDto filter) {
        return SuccessResponseDto.<PageResponseDto<AdminUserResponse>>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.get.success"))
                .data(userService.listUsers(filter))
                .build();
    }

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(
            summary = "permission.user.create",
            description = "Create a new user",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "user")})
            })
    public SuccessResponseDto<Long> createUser(@RequestBody @Valid AdminUserCreateRequestDto req) {
        return SuccessResponseDto.<Long>builder()
                .status(HttpStatus.CREATED.value())
                .message(translator.translate("user.create.success"))
                .data(userService.createUser(req))
                .build();
    }

    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "permission.user.delete",
            description = "Delete a user by ID",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "user")})
            })
    public SuccessResponseDto<Long> deleteUser(@PathVariable Long id) {
        return SuccessResponseDto.<Long>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.delete.success"))
                .data(userService.deleteUser(id))
                .build();
    }

    @DeleteMapping("/batch")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "permission.user.delete-many",
            description = "Delete multiple users by IDs",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "user")})
            })
    public SuccessResponseDto<Void> deleteUsers(@RequestBody UserManyDeleteRequestDto req) {
        userService.deleteManyUsers(req);
        return SuccessResponseDto.<Void>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.delete.success"))
                .build();
    }

    @PutMapping("/update")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
            summary = "permission.user.update",
            description = "Update user details",
            extensions = {
                @Extension(
                        name = "x-module",
                        properties = {@ExtensionProperty(name = "value", value = "user")})
            })
    public SuccessResponseDto<Long> updateUser(@RequestBody @Valid UserUpdateRequestDto req) {
        return SuccessResponseDto.<Long>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.update.success"))
                .data(userService.updateUser(req))
                .build();
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AdminUserCreateRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import dev.edu.ngochandev.authservice.commons.enums.UserStatus;
import jakarta.validation.constraints.NotNull;
import java.util.List;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class AdminUserCreateRequestDto extends UserRegisterRequestDto {
    @NotNull(message = "user.status.not-null")
    private UserStatus status;

    private final List<Long> roleIds = List.of();
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthenticationRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class AuthenticationRequestDto {
    @NotBlank(message = "error.identifier.not-blank")
    private String identifier; // can be username or email

    @NotBlank(message = "error.password.not-blank")
    private String password;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthLogoutRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class AuthLogoutRequestDto {
    @NotBlank(message = "error.token.not-blank")
    private String token;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthRefreshTokenRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class AuthRefreshTokenRequestDto {
    @NotBlank(message = "error.token.not-blank")
    private String token;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/AuthVerifyTokenRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class AuthVerifyTokenRequestDto {
    @NotBlank(message = "error.token.not-blank")
    private String token;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/RoleCreateRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class RoleCreateRequestDto {
    @NotBlank(message = "error.role.name.not-blank")
    private String name;

    private String description;
    private Long[] permissionIds;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/RoleManyDeleteRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import java.util.List;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class RoleManyDeleteRequestDto {
    private List<Long> ids = List.of();
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserChangePasswordRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class UserChangePasswordRequestDto {
    @NotNull(message = "error.user-id.not-null")
    @Min(value = 1, message = "error.user-id.invalid")
    private Long userId;

    @NotBlank(message = "error.password.not-blank")
    private String oldPassword;

    @Size(min = 8, message = "error.password.too-short")
    @NotBlank(message = "error.password.not-blank")
    private String newPassword;

    @NotBlank(message = "error.password.not-blank")
    @Size(min = 8, message = "error.password.too-short")
    private String confirmPassword;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserForgotPasswordRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class UserForgotPasswordRequestDto {
    @NotBlank(message = "error.email.not-blank")
    @Email(message = "error.email.invalid")
    private String email;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserManyDeleteRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import java.util.List;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class UserManyDeleteRequestDto {
    private final List<Long> ids = List.of();
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserRegisterRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class UserRegisterRequestDto {
    @NotBlank(message = "error.username.not-blank")
    private String username;

    @NotBlank(message = "error.fullname.not-blank")
    private String fullName;

    @NotBlank(message = "error.email.not-blank")
    @Email(message = "error.email.invalid")
    private String email;

    @NotBlank(message = "error.password.not-blank")
    @Size(min = 8, message = "error.password.too-short")
    private String password;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserResetPasswordRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class UserResetPasswordRequestDto {

    @NotBlank(message = "error.token.not-blank")
    private String token;

    @Size(min = 8, message = "error.password.too-short")
    @NotBlank(message = "error.password.not-blank")
    private String newPassword;

    @NotBlank(message = "error.password.not-blank")
    @Size(min = 8, message = "error.password.too-short")
    private String confirmPassword;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserUpdateRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import dev.edu.ngochandev.authservice.commons.enums.UserStatus;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import java.util.List;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class UserUpdateRequestDto {
    @NotNull(message = "error.user-id.not-null")
    @Min(value = 1, message = "error.user-id.invalid")
    private Long id;

    private UserStatus status;
    private final List<Long> roleIds = List.of();

    @NotBlank(message = "error.fullname.not-blank")
    private String fullName;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/req/UserVerifyEmailRequestDto.java
================
package dev.edu.ngochandev.authservice.dtos.req;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class UserVerifyEmailRequestDto {
    @NotBlank(message = "error.token.not-blank")
    private String token;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/AdminUserResponse.java
================
package dev.edu.ngochandev.authservice.dtos.res;

import java.time.LocalDateTime;
import java.util.List;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class AdminUserResponse extends UserResponseDto {
    private LocalDateTime lastLoginAt;
    private LocalDateTime lastUpdatedAt;
    private Long createdBy;
    private Long updatedBy;
    private List<RoleSummaryResponseDto> roles;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/PermissionResponseDto.java
================
package dev.edu.ngochandev.authservice.dtos.res;

import lombok.Builder;

@Builder
public record PermissionResponseDto(Long id, String name, String method, String endpoint, String module) {}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/RoleDetailResponseDto.java
================
package dev.edu.ngochandev.authservice.dtos.res;

import java.util.List;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class RoleDetailResponseDto extends RoleSummaryResponseDto {
    List<PermissionResponseDto> permissions;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/RoleSummaryResponseDto.java
================
package dev.edu.ngochandev.authservice.dtos.res;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class RoleSummaryResponseDto {
    private Long id;
    private String name;
    private String description;
    private String createdAt;
    private String updatedAt;
    private String createdBy;
    private String updatedBy;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/TokenResponseDto.java
================
package dev.edu.ngochandev.authservice.dtos.res;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class TokenResponseDto {
    private String accessToken;
    private String refreshToken;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/dtos/res/UserResponseDto.java
================
package dev.edu.ngochandev.authservice.dtos.res;

import dev.edu.ngochandev.authservice.commons.enums.UserStatus;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class UserResponseDto {
    private Long id;
    private String username;
    private String fullName;
    private String email;
    private UserStatus status;
    private String createdAt;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/BaseEntity.java
================
package dev.edu.ngochandev.authservice.entities;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

@MappedSuperclass
@Getter
@Setter
@EntityListeners(AuditingEntityListener.class)
public class BaseEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "is_deleted", nullable = false)
    private Boolean isDeleted;

    @Column(name = "created_at")
    @Temporal(TemporalType.TIMESTAMP)
    @CreationTimestamp
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    @Temporal(TemporalType.TIMESTAMP)
    @UpdateTimestamp
    private LocalDateTime updatedAt;

    @Column(name = "created_by", nullable = true, updatable = false)
    @CreatedBy
    private Long createdBy;

    @Column(name = "updated_by", nullable = true)
    @LastModifiedBy
    private Long updatedBy;

    @PrePersist
    public void prePersist() {
        if (isDeleted == null) {
            isDeleted = false;
        }
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/InvalidatedTokenEntity.java
================
package dev.edu.ngochandev.authservice.entities;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import java.util.Date;
import lombok.*;

@Entity
@Table(name = "tbl_invalidated_tokens")
@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class InvalidatedTokenEntity {
    @Id
    private String id;

    private Date expiredTime;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/MailEntity.java
================
package dev.edu.ngochandev.authservice.entities;

import dev.edu.ngochandev.authservice.commons.enums.MailStatus;
import dev.edu.ngochandev.authservice.commons.enums.MailType;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "tbl_emails")
@Setter
@Getter
public class MailEntity extends BaseEntity {

    @Column(name = "sender_address", nullable = false)
    private String from;

    @Column(name = "recipient_address", nullable = false)
    private String to;

    @Column(name = "subject", nullable = false, length = 512)
    private String subject;

    @Column(name = "content", nullable = false, columnDefinition = "TEXT")
    private String content;

    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false)
    private MailStatus status;

    @Enumerated(EnumType.STRING)
    @Column(name = "type", nullable = false)
    private MailType type;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/PermissionEntity.java
================
package dev.edu.ngochandev.authservice.entities;

import dev.edu.ngochandev.authservice.commons.enums.HttpMethod;
import jakarta.persistence.*;
import java.util.HashSet;
import java.util.Set;
import lombok.*;
import org.hibernate.annotations.SQLRestriction;

@Entity
@Table(name = "tbl_permissions")
@Getter
@Setter
@NoArgsConstructor
@SQLRestriction("is_deleted = false")
public class PermissionEntity extends BaseEntity {
    @Column(name = "name", nullable = false)
    private String name;

    @Column(name = "method", nullable = false)
    @Enumerated(EnumType.STRING)
    private HttpMethod method;

    @Column(name = "api_path", nullable = false)
    private String apiPath;

    @Column(name = "module", nullable = false)
    private String module;

    @OneToMany(mappedBy = "permission", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<RolePermissionEntity> rolePermissions = new HashSet<>();

    public PermissionEntity(Long id) {
        this.setId(id);
    }

}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/RoleEntity.java
================
package dev.edu.ngochandev.authservice.entities;

import jakarta.persistence.*;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;
import lombok.*;
import org.hibernate.annotations.SQLRestriction;

@Entity
@Table(name = "tbl_roles")
@Setter
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@SQLRestriction("is_deleted = false")
public class RoleEntity extends BaseEntity {
    @Column(name = "name", nullable = false)
    private String name;

    @Column(name = "description", nullable = true)
    private String description;

    @OneToMany(mappedBy = "role", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<UserRoleEntity> userRoles = new HashSet<>();

    @OneToMany(mappedBy = "role", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<RolePermissionEntity> rolePermissions = new HashSet<>();

    public Set<PermissionEntity> getPermissions() {
        return rolePermissions.stream().map(RolePermissionEntity::getPermission).collect(Collectors.toSet());
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/RolePermissionEntity.java
================
package dev.edu.ngochandev.authservice.entities;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.SQLRestriction;

@Entity
@Table(name = "tbl_roles_permissions")
@Getter
@Setter
@SQLRestriction("is_deleted = false")
public class RolePermissionEntity extends BaseEntity {
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "role_id", nullable = false)
    private RoleEntity role;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "permission_id", nullable = false)
    private PermissionEntity permission;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/UserEntity.java
================
package dev.edu.ngochandev.authservice.entities;

import dev.edu.ngochandev.authservice.commons.enums.UserStatus;
import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;
import lombok.*;
import org.hibernate.annotations.SQLRestriction;

@Entity
@Table(name = "tbl_users")
@Getter
@Builder
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SQLRestriction("is_deleted = false")
public class UserEntity extends BaseEntity {
    @Column(name = "username", nullable = false, unique = true)
    private String username;

    @Column(name = "full_name", nullable = false)
    private String fullName;

    @Column(name = "email", nullable = false, unique = true)
    private String email;

    @Column(name = "password", nullable = false)
    private String password;

    @Column(name = "status", nullable = true)
    @Enumerated(EnumType.STRING)
    private UserStatus status;

    @Column(name = "last_login_at", nullable = true)
    @Temporal(TemporalType.TIMESTAMP)
    private LocalDateTime lastLoginAt;

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "user")
    private Set<UserRoleEntity> userRoles = new HashSet<>();

    public Set<RoleEntity> getRoles() {
        return userRoles.stream().map(UserRoleEntity::getRole).collect(Collectors.toSet());
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/entities/UserRoleEntity.java
================
package dev.edu.ngochandev.authservice.entities;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.SQLRestriction;

@Entity
@Table(name = "tbl_users_roles")
@Getter
@Setter
@SQLRestriction("is_deleted = false")
@AllArgsConstructor
@NoArgsConstructor
public class UserRoleEntity extends BaseEntity {
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private UserEntity user;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "role_id", nullable = false)
    private RoleEntity role;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/CustomAccessDeniedHandler.java
================
package dev.edu.ngochandev.authservice.exceptions;

import com.fasterxml.jackson.databind.ObjectMapper;
import dev.edu.ngochandev.common.dtos.res.ErrorResponseDto;
import dev.edu.ngochandev.common.i18n.Translator;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class CustomAccessDeniedHandler implements AccessDeniedHandler {
    private final Translator translator;
    @Override
    public void handle(
            HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)
            throws IOException, ServletException {
        ErrorResponseDto errorResponse = new ErrorResponseDto();
        errorResponse.setStatus(HttpStatus.FORBIDDEN.value());
        errorResponse.setError(HttpStatus.FORBIDDEN.getReasonPhrase());
        errorResponse.setMessage(translator.translate("error.access.denied"));
        errorResponse.setPath(request.getRequestURI());

        response.setStatus(HttpStatus.FORBIDDEN.value());
        response.setContentType(MediaType.APPLICATION_JSON_VALUE);
        response.setCharacterEncoding("UTF-8");

        ObjectMapper objectMapper = new ObjectMapper();
        response.getWriter().write(objectMapper.writeValueAsString(errorResponse));
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/FilterDataException.java
================
package dev.edu.ngochandev.authservice.exceptions;

public class FilterDataException extends RuntimeException {
    public FilterDataException(String message) {
        super(message);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/exceptions/GlobalExceptionHandler.java
================
package dev.edu.ngochandev.authservice.exceptions;

import dev.edu.ngochandev.common.exceptions.DateFormatException;
import dev.edu.ngochandev.common.exceptions.DuplicateResourceException;
import dev.edu.ngochandev.common.exceptions.ResourceNotFoundException;
import dev.edu.ngochandev.common.exceptions.UnauthorizedException;
import dev.edu.ngochandev.common.dtos.res.ErrorResponseDto;
import dev.edu.ngochandev.common.i18n.Translator;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;

@RestControllerAdvice
@RequiredArgsConstructor
public class GlobalExceptionHandler {
    private final Translator translator;

    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public ErrorResponseDto handleGlobalException(Exception ex, WebRequest req) {
        String message = ex.getMessage() != null ? ex.getMessage() : "An unexpected error occurred";
        return new ErrorResponseDto(HttpStatus.INTERNAL_SERVER_ERROR, message, req);
    }

    @ExceptionHandler(FilterDataException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ErrorResponseDto handleFilterDataException(FilterDataException ex, WebRequest req) {
        return new ErrorResponseDto(HttpStatus.BAD_REQUEST, ex.getMessage(), req);
    }

    @ExceptionHandler(ResourceNotFoundException.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public ErrorResponseDto handleResourceNotFound(Exception ex, WebRequest req) {
        return new ErrorResponseDto(HttpStatus.NOT_FOUND, translator.translate(ex.getMessage()), req);
    }

    @ExceptionHandler(DateFormatException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ErrorResponseDto handleDateFormatException(DateFormatException ex, WebRequest req) {
        return new ErrorResponseDto(HttpStatus.BAD_REQUEST, translator.translate(ex.getMessage()), req);
    }

    @ExceptionHandler({MethodArgumentNotValidException.class})
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ErrorResponseDto handleValidationExceptions(MethodArgumentNotValidException ex, WebRequest req) {
        ErrorResponseDto res =
                new ErrorResponseDto(HttpStatus.BAD_REQUEST, translator.translate("error.body.invalid"), req);
        if (ex.getBindingResult().hasErrors()) {
            ex.getBindingResult().getFieldErrors().forEach(fieldError -> {
                String message = translator.translate(fieldError.getDefaultMessage());
                res.addValidationError(fieldError.getField(), message);
            });
        }
        return res;
    }

    @ExceptionHandler(HttpMessageNotReadableException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ErrorResponseDto handleHttpMessageNotReadableException(HttpMessageNotReadableException ex, WebRequest req) {
        String message = ex.getMessage();
        int startIndex = message.indexOf("[") + 1;
        int endIndex = message.indexOf("]");
        message = message.substring(startIndex, endIndex);
        return new ErrorResponseDto(
                HttpStatus.BAD_REQUEST, translator.translate("error.enum.invalid") + " " + message, req);
    }

    @ExceptionHandler(UnauthorizedException.class)
    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    public ErrorResponseDto handleUnauthorizedException(UnauthorizedException ex, WebRequest req) {
        return new ErrorResponseDto(HttpStatus.UNAUTHORIZED, translator.translate(ex.getMessage()), req);
    }

    @ExceptionHandler(DuplicateResourceException.class)
    @ResponseStatus(HttpStatus.CONFLICT)
    public ErrorResponseDto handleDuplicateResourceException(DuplicateResourceException ex, WebRequest req) {
        return new ErrorResponseDto(HttpStatus.CONFLICT, translator.translate(ex.getMessage()), req);
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/kafka/producers/UserEventKafkaProducer.java
================
package dev.edu.ngochandev.authservice.kafka.producers;

import dev.edu.ngochandev.common.events.UserRegisteredEvent;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.event.TransactionPhase;
import org.springframework.transaction.event.TransactionalEventListener;

@Service
@RequiredArgsConstructor
@Slf4j(topic = "USER-EVENT-KAFKA-PRODUCER")
public class UserEventKafkaProducer {
    private final KafkaTemplate<String, Object> kafkaTemplate;

    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)
    public void handleUserRegisteredEvent(UserRegisteredEvent event) {
        log.info("Producing user registered event for user ID: {}", event.getUserId());
        try {
            kafkaTemplate.send("user-registered-topic", event);
        }catch (Exception e){
            log.error("Failed to send user registered event for user ID: {}. Error: {}", event.getUserId(), e.getMessage());
        }
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/mappers/PermissionMapper.java
================
package dev.edu.ngochandev.authservice.mappers;

import dev.edu.ngochandev.authservice.dtos.res.PermissionResponseDto;
import dev.edu.ngochandev.authservice.entities.PermissionEntity;
import org.mapstruct.DecoratedWith;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

@Mapper(componentModel = "spring")
@DecoratedWith(PermissionMapperDecorator.class)
public interface PermissionMapper {
    @Mapping(source = "apiPath", target = "endpoint")
    PermissionResponseDto toResponseDto(PermissionEntity entity);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/mappers/PermissionMapperDecorator.java
================
package dev.edu.ngochandev.authservice.mappers;

import dev.edu.ngochandev.authservice.dtos.res.PermissionResponseDto;
import dev.edu.ngochandev.authservice.entities.PermissionEntity;
import dev.edu.ngochandev.common.i18n.Translator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

public abstract class PermissionMapperDecorator implements PermissionMapper {
    @Autowired
    @Qualifier("delegate")
    private PermissionMapper delegate;
    @Autowired
    private Translator translator;

    @Override
    public PermissionResponseDto toResponseDto(PermissionEntity entity) {
        PermissionResponseDto dto = delegate.toResponseDto(entity);

        if (dto != null && entity.getName() != null) {
            String translatedName = translator.translate(entity.getName());
            return PermissionResponseDto.builder()
                    .name(translatedName)
                    .id(entity.getId())
                    .method(entity.getMethod().name())
                    .module(entity.getModule())
                    .endpoint(entity.getApiPath())
                    .build();
        }
        return dto;
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/mappers/RoleMapper.java
================
package dev.edu.ngochandev.authservice.mappers;

import dev.edu.ngochandev.authservice.dtos.res.RoleDetailResponseDto;
import dev.edu.ngochandev.authservice.dtos.res.RoleSummaryResponseDto;
import dev.edu.ngochandev.authservice.entities.RoleEntity;
import org.mapstruct.Mapper;

@Mapper(
        componentModel = "spring",
        uses = {PermissionMapper.class})
public interface RoleMapper {
    RoleSummaryResponseDto mapToSummaryResponseDto(RoleEntity roleEntity);

    RoleDetailResponseDto mapToDetailResponseDto(RoleEntity roleEntity);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/mappers/UserMapper.java
================
package dev.edu.ngochandev.authservice.mappers;

import dev.edu.ngochandev.authservice.dtos.res.AdminUserResponse;
import dev.edu.ngochandev.authservice.dtos.res.UserResponseDto;
import dev.edu.ngochandev.authservice.entities.UserEntity;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

@Mapper(
        componentModel = "spring",
        uses = {RoleMapper.class})
public interface UserMapper {
    UserResponseDto toResponseDto(UserEntity entity);

    @Mapping(source = "updatedAt", target = "lastUpdatedAt")
    AdminUserResponse toAdminResponseDto(UserEntity entity);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/InvalidatedTokenRepository.java
================
package dev.edu.ngochandev.authservice.repositories;

import dev.edu.ngochandev.authservice.entities.InvalidatedTokenEntity;
import org.springframework.data.jpa.repository.JpaRepository;

public interface InvalidatedTokenRepository extends JpaRepository<InvalidatedTokenEntity, String> {}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/MailRepository.java
================
package dev.edu.ngochandev.authservice.repositories;

import dev.edu.ngochandev.authservice.entities.MailEntity;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MailRepository extends JpaRepository<MailEntity, Long> {}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/PermissionRepository.java
================
package dev.edu.ngochandev.authservice.repositories;

import dev.edu.ngochandev.authservice.commons.enums.HttpMethod;
import dev.edu.ngochandev.authservice.entities.PermissionEntity;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public interface PermissionRepository extends JpaRepository<PermissionEntity, Long> {
    @Query("SELECT p " + "FROM PermissionEntity p "
            + "WHERE LOWER(p.name) LIKE LOWER(:search) OR"
            + " LOWER(p.apiPath) LIKE LOWER(:search) OR"
            + " LOWER(p.method) LIKE LOWER(:search) OR"
            + " LOWER(p.module) LIKE LOWER(:search)")
    Page<PermissionEntity> findBySearch(@Param("search") String search, Pageable pageable);

    long countByIdIn(Collection<Long> id);

    @Query("SELECT DISTINCT p " + "FROM PermissionEntity p "
            + "JOIN p.rolePermissions rp "
            + "JOIN rp.role r "
            + "WHERE r.name IN :roleNames")
    List<PermissionEntity> findAllByRoleNames(@Param("roleNames") Collection<String> roleNames);

    Optional<PermissionEntity> findByApiPathAndMethod(String apiPath, HttpMethod method);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/RolePermissionRepository.java
================
package dev.edu.ngochandev.authservice.repositories;

import dev.edu.ngochandev.authservice.entities.RolePermissionEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface RolePermissionRepository extends JpaRepository<RolePermissionEntity, Long> {}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/RoleRepository.java
================
package dev.edu.ngochandev.authservice.repositories;

import dev.edu.ngochandev.authservice.entities.RoleEntity;
import java.util.Optional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public interface RoleRepository extends JpaRepository<RoleEntity, Long> {
    @Query("SELECT r FROM RoleEntity r " + "WHERE r.name LIKE LOWER(:search) OR " + "r.description LIKE LOWER(:search)")
    Page<RoleEntity> findBySearch(@Param("search") String search, Pageable pageable);

    Optional<RoleEntity> findByName(String name);

    @Query("SELECT r FROM RoleEntity r LEFT JOIN FETCH r.rolePermissions WHERE r.name = :name")
    Optional<RoleEntity> findByNameWithPermissions(@Param("name") String name);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/UserRepository.java
================
package dev.edu.ngochandev.authservice.repositories;

import dev.edu.ngochandev.authservice.entities.UserEntity;
import java.util.Optional;
import java.util.Set;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends JpaRepository<UserEntity, Long>, JpaSpecificationExecutor<UserEntity> {
    boolean existsByUsername(String username);

    boolean existsByEmail(String email);

    @Query("SELECT u FROM UserEntity u WHERE u.username = :identifier OR u.email = :identifier")
    Optional<UserEntity> findByUsernameOrEmail(String identifier);

    @Modifying
    @Query(
            "UPDATE UserEntity u SET u.isDeleted = true, u.updatedAt = CURRENT_TIMESTAMP WHERE u.id IN :ids AND u.isDeleted = false")
    void softDeleteAllByIds(@Param("ids") Set<Long> ids);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/repositories/UserRoleRepository.java
================
package dev.edu.ngochandev.authservice.repositories;

import dev.edu.ngochandev.authservice.entities.UserRoleEntity;
import java.util.Set;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

public interface UserRoleRepository extends JpaRepository<UserRoleEntity, Long> {
    @Modifying
    @Transactional
    @Query("UPDATE UserRoleEntity ur SET ur.isDeleted = true WHERE ur.id IN :ids AND ur.isDeleted = false")
    void softDeleteAllByIds(@Param("ids") Set<Long> ids);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/AuthService.java
================
package dev.edu.ngochandev.authservice.services;

import com.nimbusds.jose.JOSEException;
import dev.edu.ngochandev.authservice.dtos.req.*;
import dev.edu.ngochandev.authservice.dtos.res.TokenResponseDto;
import dev.edu.ngochandev.common.dtos.res.IntrospectTokenResponseDto;
import jakarta.validation.Valid;

import java.text.ParseException;

public interface AuthService {
    Long register(UserRegisterRequestDto req) throws JOSEException;

    TokenResponseDto authenticate(AuthenticationRequestDto req) throws JOSEException, ParseException;

    Long changePassword(UserChangePasswordRequestDto req);

    TokenResponseDto refreshToken(AuthRefreshTokenRequestDto req) throws ParseException, JOSEException;

    String logout(AuthLogoutRequestDto req) throws ParseException, JOSEException;

    Boolean forgotPassword(UserForgotPasswordRequestDto req) throws ParseException, JOSEException;

    Boolean resetPassword(UserResetPasswordRequestDto req) throws ParseException, JOSEException;

    Boolean verifyEmail(UserVerifyEmailRequestDto req) throws ParseException, JOSEException;

    IntrospectTokenResponseDto verifyToken(AuthVerifyTokenRequestDto req) ;
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/AuthServiceImpl.java
================
package dev.edu.ngochandev.authservice.services.impl;

import com.nimbusds.jose.JOSEException;
import dev.edu.ngochandev.authservice.commons.DataInitializer;
import dev.edu.ngochandev.authservice.commons.enums.MailType;
import dev.edu.ngochandev.authservice.commons.enums.TokenType;
import dev.edu.ngochandev.authservice.commons.enums.UserStatus;
import dev.edu.ngochandev.authservice.dtos.req.*;
import dev.edu.ngochandev.authservice.dtos.res.TokenResponseDto;
import dev.edu.ngochandev.authservice.entities.*;
import dev.edu.ngochandev.authservice.repositories.*;
import dev.edu.ngochandev.common.dtos.res.IntrospectTokenResponseDto;
import dev.edu.ngochandev.common.exceptions.DuplicateResourceException;
import dev.edu.ngochandev.common.exceptions.ResourceNotFoundException;
import dev.edu.ngochandev.common.exceptions.UnauthorizedException;
import dev.edu.ngochandev.common.events.UserRegisteredEvent;
import dev.edu.ngochandev.authservice.mappers.UserMapper;
import dev.edu.ngochandev.authservice.services.AuthService;
import dev.edu.ngochandev.authservice.services.JwtService;
import dev.edu.ngochandev.authservice.services.MailService;
import java.text.ParseException;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import dev.edu.ngochandev.common.i18n.Translator;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@Slf4j(topic = "USER-SERVICE")
@RequiredArgsConstructor
public class AuthServiceImpl implements AuthService {
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtService jwtService;
    private final InvalidatedTokenRepository invalidatedTokenRepository;
    private final MailService mailService;
    private final RoleRepository roleRepository;
    private final UserRoleRepository userRoleRepository;
    private final ApplicationEventPublisher eventPublisher;
    private final PermissionRepository permissionRepository;

    @Value("${app.frontend.main-url}")
    private String frontendUrl;

    @Override
    @Transactional(rollbackFor = Exception.class)
    public Long register(UserRegisterRequestDto req) throws JOSEException {
        if (userRepository.existsByUsername((req.getUsername()))) {
            throw new DuplicateResourceException("error.duplicate.username");
        }
        if (userRepository.existsByEmail((req.getEmail()))) {
            throw new DuplicateResourceException("error.duplicate.email");
        }

        UserEntity savedUser = userRepository.save(UserEntity.builder()
                .fullName(req.getFullName())
                .username(req.getUsername())
                .email(req.getEmail())
                .password(passwordEncoder.encode(req.getPassword()))
                .status(UserStatus.INACTIVE)
                .build());
        RoleEntity role =
                roleRepository.findByName(DataInitializer.DEFAULT_ROLE).orElseThrow();
        UserRoleEntity userRole = new UserRoleEntity();
        userRole.setRole(role);
        userRole.setUser(savedUser);
        savedUser.setUserRoles(Set.of(userRole));
        userRoleRepository.save(userRole);

        // generate email verification token
        String token = jwtService.generateToken(savedUser, TokenType.EMAIL_VERIFICATION_TOKEN);
        String verificationLink = frontendUrl + "/verify-email?token=" + token;
        // prepare email variables
        Map<String, Object> variables = new HashMap<>();
        variables.put("fullName", savedUser.getFullName());
        variables.put("verificationLink", verificationLink);
        // send email
        MailEntity mail = new MailEntity();
        mail.setTo(savedUser.getEmail());
        mail.setSubject("Xác thực tài khoản");
        mail.setType(MailType.EMAIL_VERIFICATION);
        mailService.sendMail(mail, "email-verification-mail", variables);

        // publish user registered event
        UserRegisteredEvent userRegisteredEvent = new UserRegisteredEvent(savedUser.getId(), savedUser.getFullName());
        eventPublisher.publishEvent(userRegisteredEvent);
        return savedUser.getId();
    }

    @Override
    public TokenResponseDto authenticate(AuthenticationRequestDto req) throws JOSEException, ParseException {
        UserEntity user = userRepository
                .findByUsernameOrEmail(req.getIdentifier())
                .orElseThrow(() -> new ResourceNotFoundException("error.user.not-found"));
        //check password
        if (!passwordEncoder.matches(req.getPassword(), user.getPassword())) {
            throw new UnauthorizedException("error.invalid.username-or-email");
        }
        //check user status
        if( user.getStatus() == UserStatus.INACTIVE) {
            throw new UnauthorizedException("error.user.inactive");
        }
        if(user.getStatus() == UserStatus.BLOCKED) {
            throw new UnauthorizedException("error.user.blocked");
        }

        user.setLastLoginAt(LocalDateTime.now());
        userRepository.save(user);
        String accessToken = jwtService.generateToken(user, TokenType.ACCESS_TOKEN);
        String refreshToken = jwtService.generateToken(user, TokenType.REFRESH_TOKEN);
        return TokenResponseDto.builder()
                .accessToken(accessToken)
                .refreshToken(refreshToken)
                .build();
    }

    @Override
    public Long changePassword(UserChangePasswordRequestDto req) {
        UserEntity user = this.getUserById(req.getUserId());
        if (!passwordEncoder.matches(req.getOldPassword(), user.getPassword())) {
            throw new UnauthorizedException("error.invalid.old-password");
        }
        if (!req.getNewPassword().equals(req.getConfirmPassword())) {
            throw new UnauthorizedException("error.passwords.not-match");
        }
        user.setPassword(passwordEncoder.encode(req.getNewPassword()));
        return userRepository.save(user).getId();
    }

    @Override
    public TokenResponseDto refreshToken(AuthRefreshTokenRequestDto req) throws ParseException, JOSEException {
        boolean isValid = jwtService.validateToken(req.getToken(), TokenType.REFRESH_TOKEN);
        if (!isValid) {
            throw new UnauthorizedException("error.token.invalid");
        }
        // disable current token
        String currentJti = jwtService.extractJti(req.getToken());
        Date currentExpiration = jwtService.extractExpiration(req.getToken());
        jwtService.disableToken(InvalidatedTokenEntity.builder()
                .id(currentJti)
                .expiredTime(currentExpiration)
                .build());
        // return new token
        String username = jwtService.extractUsername(req.getToken());
        UserEntity user = userRepository
                .findByUsernameOrEmail(username)
                .orElseThrow(() -> new ResourceNotFoundException("error.user.not-found"));
        String accessToken = jwtService.generateToken(user, TokenType.ACCESS_TOKEN);
        String refreshToken = jwtService.generateToken(user, TokenType.REFRESH_TOKEN);
        return TokenResponseDto.builder()
                .accessToken(accessToken)
                .refreshToken(refreshToken)
                .build();
    }

    @Override
    public String logout(AuthLogoutRequestDto req) throws ParseException, JOSEException {
        boolean isValid = jwtService.validateToken(req.getToken(), TokenType.ACCESS_TOKEN);
        if (!isValid) {
            throw new UnauthorizedException("error.token.invalid");
        }
        String jti = jwtService.extractJti(req.getToken());
        Date expiration = jwtService.extractExpiration(req.getToken());

        InvalidatedTokenEntity invalidToken =
                InvalidatedTokenEntity.builder().id(jti).expiredTime(expiration).build();

        return invalidatedTokenRepository.save(invalidToken).getId();
    }

    @Override
    public Boolean forgotPassword(UserForgotPasswordRequestDto req) throws ParseException, JOSEException {
        UserEntity user = this.getUserByEmail(req.getEmail());

        String token = jwtService.generateToken(user, TokenType.FORGOT_PASSWORD_TOKEN);
        String resetLink = frontendUrl + "/reset-password?token=" + token;

        Map<String, Object> variables = new HashMap<>();
        variables.put("fullName", user.getFullName());
        variables.put("resetLink", resetLink);

        MailEntity mail = new MailEntity();
        mail.setTo(user.getEmail());
        mail.setSubject("Yêu cầu đặt lại mật khẩu");
        mail.setType(MailType.FORGOT_PASSWORD);

        mailService.sendMail(mail, "forgot-password-mail", variables);

        return true;
    }

    @Override
    public Boolean resetPassword(UserResetPasswordRequestDto req) throws ParseException, JOSEException {
        // check token validity
        boolean isValid = jwtService.validateToken(req.getToken(), TokenType.FORGOT_PASSWORD_TOKEN);
        if (!isValid) {
            throw new UnauthorizedException("error.token.invalid");
        }
        if (!req.getNewPassword().equals(req.getConfirmPassword())) {
            throw new UnauthorizedException("error.passwords.not-match");
        }
        // get user from token
        String email = jwtService.extractUsername(req.getToken());
        UserEntity user = this.getUserByEmail(email);
        // update password
        user.setPassword(passwordEncoder.encode(req.getNewPassword()));
        userRepository.save(user);

        // disable current token
        String jti = jwtService.extractJti(req.getToken());
        Date expiration = jwtService.extractExpiration(req.getToken());
        jwtService.disableToken(
                InvalidatedTokenEntity.builder().id(jti).expiredTime(expiration).build());
        return true;
    }

    @Override
    public Boolean verifyEmail(UserVerifyEmailRequestDto req) throws ParseException, JOSEException {
        // check token validity
        boolean isValid = jwtService.validateToken(req.getToken(), TokenType.EMAIL_VERIFICATION_TOKEN);
        if (!isValid) {
            throw new UnauthorizedException("error.token.invalid");
        }
        // get user from token
        String email = jwtService.extractUsername(req.getToken());
        UserEntity user = this.getUserByEmail(email);

        user.setStatus(UserStatus.ACTIVE);
        userRepository.save(user);
        // disable current token
        String jti = jwtService.extractJti(req.getToken());
        Date expiration = jwtService.extractExpiration(req.getToken());
        jwtService.disableToken(
                InvalidatedTokenEntity.builder().id(jti).expiredTime(expiration).build());

        return true;
    }

    @Override
    public IntrospectTokenResponseDto verifyToken(AuthVerifyTokenRequestDto req)  {
        var introspectToken = IntrospectTokenResponseDto.builder();
        try{
            String username = jwtService.extractUsername(req.getToken());
            UserEntity user = userRepository.findByUsernameOrEmail(username).orElseThrow(()-> new ResourceNotFoundException("error.user.not-found"));
            if(user.getStatus() != UserStatus.ACTIVE) return introspectToken.active(false).build();

            boolean isValid = jwtService.validateToken(req.getToken(), TokenType.ACCESS_TOKEN);
            if (!isValid) {
                return introspectToken.active(false).build();
            }

            Set<String> roles = user.getRoles().stream().map(RoleEntity::getName).collect(Collectors.toSet());
            Set<String> permissions = permissionRepository.findAllByRoleNames(roles)
                    .stream().map(entity -> String.format("%s:%s", entity.getMethod(), entity.getApiPath()))
                    .collect(Collectors.toSet());

            return introspectToken
                    .active(true)
                    .userId(user.getId())
                    .username(user.getUsername())
                    .roles(roles)
                    .permissions(permissions)
                    .exp(jwtService.extractExpiration(req.getToken()).getTime())
                    .build();
        }catch (Exception e){
            return introspectToken.active(false).build();
        }
    }

    private UserEntity getUserById(Long id) {
        return userRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("error.user.not-found"));
    }

    private UserEntity getUserByEmail(String email) {
        return userRepository
                .findByUsernameOrEmail(email)
                .orElseThrow(() -> new ResourceNotFoundException("error.user.not-found"));
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/JwtServiceImpl.java
================
package dev.edu.ngochandev.authservice.services.impl;

import com.nimbusds.jose.*;
import com.nimbusds.jose.crypto.MACSigner;
import com.nimbusds.jose.crypto.MACVerifier;
import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.SignedJWT;
import dev.edu.ngochandev.authservice.commons.enums.TokenType;
import dev.edu.ngochandev.authservice.entities.InvalidatedTokenEntity;
import dev.edu.ngochandev.authservice.entities.RoleEntity;
import dev.edu.ngochandev.authservice.entities.UserEntity;
import dev.edu.ngochandev.authservice.repositories.InvalidatedTokenRepository;
import dev.edu.ngochandev.authservice.services.JwtService;
import java.text.ParseException;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.Set;
import java.util.UUID;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
@Slf4j(topic = "JWT-SERVICE")
@RequiredArgsConstructor
public class JwtServiceImpl implements JwtService {
    @Value("${jwt.access-token-secret}")
    private String accessSecretKey;

    @Value("${jwt.forgot-password-token-secret}")
    private String forgotPasswordSecretKey;

    @Value("${jwt.email-verification-token-secret}")
    private String emailSecretKey;

    @Value("${jwt.access-expiration}")
    private Long accessExpiration;

    @Value("${jwt.forgot-password-expiration}")
    private Long forgotPasswordExpiration;

    @Value("${jwt.refresh-token-secret}")
    private String refreshSecretKey;

    @Value("${jwt.email-verification-expiration}")
    private Long emailVerificationExpiration;

    @Value("${jwt.refresh-expiration}")
    private Long refreshExpiration;

    @Value("${jwt.issuer}")
    private String issuer;

    private final InvalidatedTokenRepository invalidatedTokenRepository;

    @Override
    public String generateToken(UserEntity user, TokenType type) throws JOSEException {
        return switch (type) {
            case ACCESS_TOKEN -> this.generateToken(user, accessSecretKey, accessExpiration);
            case REFRESH_TOKEN -> this.generateToken(user, refreshSecretKey, refreshExpiration);
            case FORGOT_PASSWORD_TOKEN -> this.generateToken(user, forgotPasswordSecretKey, forgotPasswordExpiration);
            case EMAIL_VERIFICATION_TOKEN -> this.generateToken(user, emailSecretKey, emailVerificationExpiration);
        };
    }

    private String generateToken(UserEntity user, String secretKey, Long expirationTime) throws JOSEException {
        JWSHeader header = new JWSHeader(JWSAlgorithm.HS256);
        JWTClaimsSet jwtClaimsSet = new JWTClaimsSet.Builder()
                .issueTime(new Date())
                .expirationTime(new Date(
                        Instant.now().plus(expirationTime, ChronoUnit.MINUTES).toEpochMilli()))
                .subject(user.getUsername())
                .issuer(issuer)
                .jwtID(UUID.randomUUID().toString())
                .claim("scope", this.buildScope(user))
                .claim("userId", user.getId())
                .build();

        Payload payload = new Payload(jwtClaimsSet.toJSONObject());

        JWSObject jwsObject = new JWSObject(header, payload);
        jwsObject.sign(new MACSigner(secretKey));
        return jwsObject.serialize();
    }

    private String buildScope(UserEntity user) {
        Set<RoleEntity> roles = user.getRoles();
        StringBuilder scopeBuilder = new StringBuilder();
        for (RoleEntity role : roles) {
            scopeBuilder.append(role.getName()).append(" ");
        }
        return scopeBuilder.toString().trim();
    }

    @Override
    public boolean validateToken(String token, TokenType type) throws JOSEException, ParseException {
        byte[] secretKey =
                switch (type) {
                    case ACCESS_TOKEN -> accessSecretKey.getBytes();
                    case REFRESH_TOKEN -> refreshSecretKey.getBytes();
                    case FORGOT_PASSWORD_TOKEN -> forgotPasswordSecretKey.getBytes();
                    case EMAIL_VERIFICATION_TOKEN -> emailSecretKey.getBytes();
                };

        JWSVerifier verifier = new MACVerifier(secretKey);
        SignedJWT signedJWT = SignedJWT.parse(token);
        Date expirationTime = signedJWT.getJWTClaimsSet().getExpirationTime();
        if (!signedJWT.verify(verifier) || expirationTime.before(new Date())) {
            return false;
        }
        return !invalidatedTokenRepository.existsById(this.extractJti(token));
    }

    @Override
    public String extractUsername(String token) throws ParseException {
        return SignedJWT.parse(token).getJWTClaimsSet().getSubject();
    }

    @Override
    public String extractJti(String token) throws ParseException {
        return SignedJWT.parse(token).getJWTClaimsSet().getJWTID();
    }

    @Override
    public Date extractExpiration(String token) throws ParseException {
        return SignedJWT.parse(token).getJWTClaimsSet().getExpirationTime();
    }

    @Override
    public String disableToken(InvalidatedTokenEntity invalidatedToken) {
        return invalidatedTokenRepository.save(invalidatedToken).getId();
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/MailServiceImpl.java
================
package dev.edu.ngochandev.authservice.services.impl;

import dev.edu.ngochandev.authservice.commons.enums.MailStatus;
import dev.edu.ngochandev.authservice.entities.MailEntity;
import dev.edu.ngochandev.authservice.repositories.MailRepository;
import dev.edu.ngochandev.authservice.services.MailService;
import jakarta.mail.internet.MimeMessage;
import java.util.Map;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.thymeleaf.context.Context;
import org.thymeleaf.spring6.SpringTemplateEngine;

@Service
@RequiredArgsConstructor
@Slf4j(topic = "MAIL-SERVICE")
public class MailServiceImpl implements MailService {
    private final MailRepository mailRepository;
    private final JavaMailSender mailSender;
    private final SpringTemplateEngine templateEngine;

    @Value("${spring.mail.username}")
    private String from;

    @Override
    public boolean sendMail(MailEntity mail, String templateName, Map<String, Object> variables) {
        mail.setFrom(from);
        mail.setStatus(MailStatus.PENDING);

        // create context
        Context context = new Context();
        context.setVariables(variables);

        // render template
        String htmlContent = templateEngine.process("/email/" + templateName, context);
        mail.setContent(htmlContent);

        // send mail
        MailEntity savedMail = mailRepository.save(mail);
        log.info("Sending mail to: {}", savedMail.getTo());

        try {
            MimeMessage mimeMailMessage = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(mimeMailMessage, "UTF-8");
            helper.setText(mail.getContent(), true);
            helper.setTo(savedMail.getTo());
            helper.setFrom(savedMail.getFrom());
            helper.setSubject(savedMail.getSubject());
            mailSender.send(mimeMailMessage);

            savedMail.setStatus(MailStatus.SENT);
            log.info("Email sent to: {}", savedMail.getTo());
        } catch (Exception e) {
            savedMail.setStatus(MailStatus.FAILED);
            log.error("Failed to send email to: {}", savedMail.getTo());
            mailRepository.save(savedMail);
            return false;
        }
        mailRepository.save(savedMail);
        return true;
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/PermissionServiceImpl.java
================
package dev.edu.ngochandev.authservice.services.impl;

import dev.edu.ngochandev.authservice.commons.MyUtils;
import dev.edu.ngochandev.common.dtos.req.SimpleFilterRequestDto;
import dev.edu.ngochandev.authservice.dtos.res.PermissionResponseDto;
import dev.edu.ngochandev.authservice.entities.PermissionEntity;
import dev.edu.ngochandev.authservice.mappers.PermissionMapper;
import dev.edu.ngochandev.authservice.repositories.PermissionRepository;
import dev.edu.ngochandev.authservice.services.PermissionService;
import java.util.List;

import dev.edu.ngochandev.common.dtos.res.PageResponseDto;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

@Service
@RequiredArgsConstructor
public class PermissionServiceImpl implements PermissionService {
    private final PermissionRepository permissionRepository;
    private final PermissionMapper permissionMapper;

    @Override
    public PageResponseDto<PermissionResponseDto> getAllPermissions(SimpleFilterRequestDto filter) {
        // create pageable
        Pageable pageable = MyUtils.createPageable(filter);

        Page<PermissionEntity> pageItems = null;
        if (StringUtils.hasLength(filter.getSearch())) {
            pageItems = permissionRepository.findBySearch("%" + filter.getSearch() + "%", pageable);
        } else {
            pageItems = permissionRepository.findAll(pageable);
        }

        List<PermissionResponseDto> itemsResponse =
                pageItems.map(permissionMapper::toResponseDto).toList();

        return PageResponseDto.<PermissionResponseDto>builder()
                .currentPage(filter.getPage())
                .totalElements(pageItems.getTotalElements())
                .totalPages(pageItems.getTotalPages())
                .items(itemsResponse)
                .build();
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/RoleServiceImpl.java
================
package dev.edu.ngochandev.authservice.services.impl;

import dev.edu.ngochandev.authservice.commons.MyUtils;
import dev.edu.ngochandev.authservice.dtos.req.RoleCreateRequestDto;
import dev.edu.ngochandev.authservice.dtos.req.RoleManyDeleteRequestDto;
import dev.edu.ngochandev.common.dtos.req.SimpleFilterRequestDto;
import dev.edu.ngochandev.authservice.dtos.res.RoleDetailResponseDto;
import dev.edu.ngochandev.authservice.dtos.res.RoleSummaryResponseDto;
import dev.edu.ngochandev.authservice.entities.PermissionEntity;
import dev.edu.ngochandev.authservice.entities.RoleEntity;
import dev.edu.ngochandev.authservice.entities.RolePermissionEntity;
import dev.edu.ngochandev.common.exceptions.ResourceNotFoundException;
import dev.edu.ngochandev.authservice.mappers.RoleMapper;
import dev.edu.ngochandev.authservice.repositories.PermissionRepository;
import dev.edu.ngochandev.authservice.repositories.RolePermissionRepository;
import dev.edu.ngochandev.authservice.repositories.RoleRepository;
import dev.edu.ngochandev.authservice.services.RoleService;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import dev.edu.ngochandev.common.dtos.res.PageResponseDto;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

@Service
@RequiredArgsConstructor
public class RoleServiceImpl implements RoleService {
    private final RoleRepository roleRepository;
    private final PermissionRepository permissionRepository;
    private final RolePermissionRepository rolePermissionRepository;
    private final RoleMapper roleMapper;

    @Override
    public PageResponseDto<RoleSummaryResponseDto> getAllRoles(SimpleFilterRequestDto filter) {
        // pageable
        Pageable pageable = MyUtils.createPageable(filter);
        // search
        Page<RoleEntity> pageItems = null;
        if (StringUtils.hasLength(filter.getSearch())) {
            pageItems = roleRepository.findBySearch("%" + filter.getSearch() + "%", pageable);
        } else {
            pageItems = roleRepository.findAll(pageable);
        }
        List<RoleSummaryResponseDto> itemsResponse =
                pageItems.map(roleMapper::mapToSummaryResponseDto).toList();

        return PageResponseDto.<RoleSummaryResponseDto>builder()
                .currentPage(filter.getPage())
                .totalElements(pageItems.getTotalElements())
                .totalPages(pageItems.getTotalPages())
                .items(itemsResponse)
                .build();
    }

    @Override
    public RoleDetailResponseDto getRoleById(Long id) {
        RoleEntity foundRole =
                roleRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("error.role.not.found"));
        return roleMapper.mapToDetailResponseDto(foundRole);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public Long createRole(RoleCreateRequestDto req) {
        List<Long> permissionIds = List.of(req.getPermissionIds());

        List<PermissionEntity> foundPermissions = permissionRepository.findAllById(permissionIds);
        if (foundPermissions.size() != permissionIds.size()) {
            throw new ResourceNotFoundException("error.permission.not.found");
        }

        RoleEntity newRole = RoleEntity.builder()
                .name(req.getName())
                .description(req.getDescription())
                .build();
        roleRepository.save(newRole);

        Set<RolePermissionEntity> permissionsToAssign = new HashSet<>();
        for (PermissionEntity permission : foundPermissions) {
            RolePermissionEntity assignment = new RolePermissionEntity();
            assignment.setRole(newRole);
            assignment.setPermission(permission);
            permissionsToAssign.add(assignment);
        }
        rolePermissionRepository.saveAll(permissionsToAssign);
        return newRole.getId();
    }

    @Override
    public Long deleteRoleById(Long id) {
        RoleEntity foundRole =
                roleRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("error.role.not.found"));
        // Soft delete
        foundRole.setIsDeleted(true);
        foundRole.getRolePermissions().forEach(rolePermission -> {
            rolePermission.setIsDeleted(true);
            rolePermissionRepository.save(rolePermission);
        });
        roleRepository.save(foundRole);
        return foundRole.getId();
    }

    @Override
    public void deleteManyRoles(RoleManyDeleteRequestDto req) {
        List<RoleEntity> roles = roleRepository.findAllById(req.getIds());
        if (roles.size() != req.getIds().size()) {
            throw new ResourceNotFoundException("error.role.not.found");
        }
        for (RoleEntity role : roles) {
            role.setIsDeleted(true);
            roleRepository.save(role);
            // Soft delete role permissions
            role.getRolePermissions().forEach(rolePermission -> {
                rolePermission.setIsDeleted(true);
                rolePermissionRepository.save(rolePermission);
            });
        }
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/impl/UserServiceImpl.java
================
package dev.edu.ngochandev.authservice.services.impl;

import dev.edu.ngochandev.authservice.commons.MyUtils;
import dev.edu.ngochandev.authservice.dtos.req.AdminUserCreateRequestDto;
import dev.edu.ngochandev.common.dtos.req.AdvancedFilterRequestDto;
import dev.edu.ngochandev.authservice.dtos.req.UserManyDeleteRequestDto;
import dev.edu.ngochandev.authservice.dtos.req.UserUpdateRequestDto;
import dev.edu.ngochandev.authservice.dtos.res.AdminUserResponse;
import dev.edu.ngochandev.authservice.entities.BaseEntity;
import dev.edu.ngochandev.authservice.entities.RoleEntity;
import dev.edu.ngochandev.authservice.entities.UserEntity;
import dev.edu.ngochandev.authservice.entities.UserRoleEntity;
import dev.edu.ngochandev.common.events.UserRegisteredEvent;
import dev.edu.ngochandev.common.exceptions.DuplicateResourceException;
import dev.edu.ngochandev.common.exceptions.ResourceNotFoundException;
import dev.edu.ngochandev.authservice.mappers.UserMapper;
import dev.edu.ngochandev.authservice.repositories.RoleRepository;
import dev.edu.ngochandev.authservice.repositories.UserRepository;
import dev.edu.ngochandev.authservice.repositories.UserRoleRepository;
import dev.edu.ngochandev.authservice.services.UserService;
import dev.edu.ngochandev.authservice.specifications.UserSpecification;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import dev.edu.ngochandev.common.dtos.res.PageResponseDto;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@Slf4j
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;
    private final UserMapper userMapper;
    private final RoleRepository roleRepository;
    private final UserRoleRepository userRoleRepository;
    private final PasswordEncoder passwordEncoder;
    private final ApplicationEventPublisher eventPublisher;

    @Override
    public PageResponseDto<AdminUserResponse> listUsers(AdvancedFilterRequestDto filter) {
        Pageable pageable = MyUtils.createPageable(filter);
        Specification<UserEntity> spec = new UserSpecification(filter.getFilters(), filter.getSearch());
        Page<UserEntity> pageOfUsers = userRepository.findAll(spec, pageable);

        return PageResponseDto.<AdminUserResponse>builder()
                .currentPage(filter.getPage())
                .totalElements(pageOfUsers.getTotalElements())
                .totalPages(pageOfUsers.getTotalPages())
                .items(pageOfUsers.map(userMapper::toAdminResponseDto).getContent())
                .build();
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public Long createUser(AdminUserCreateRequestDto req) {
        if (userRepository.existsByUsername((req.getUsername()))) {
            throw new DuplicateResourceException("error.duplicate.username");
        }
        if (userRepository.existsByEmail((req.getEmail()))) {
            throw new DuplicateResourceException("error.duplicate.email");
        }
        // check role ids
        List<RoleEntity> rolesToAssign = roleRepository.findAllById(req.getRoleIds());
        if (rolesToAssign.size() != req.getRoleIds().size()) {
            throw new ResourceNotFoundException("error.role.not-found");
        }
        // save user
        UserEntity newUser = UserEntity.builder()
                .fullName(req.getFullName())
                .username(req.getUsername())
                .email(req.getEmail())
                .password(passwordEncoder.encode(req.getPassword()))
                .status(req.getStatus())
                .build();
        UserEntity savedUser = userRepository.save(newUser);
        // save users-roles
        List<UserRoleEntity> userRoles = rolesToAssign.stream()
                .map(role -> new UserRoleEntity(newUser, role))
                .toList();
        userRoleRepository.saveAll(userRoles);
        // publish user registered event
        UserRegisteredEvent userRegisteredEvent = new UserRegisteredEvent(savedUser.getId(), savedUser.getFullName());
        eventPublisher.publishEvent(userRegisteredEvent);

        return savedUser.getId();
    }

    @Override
    @Transactional
    public Long deleteUser(Long id) {
        UserEntity user =
                userRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("error.user.not-found"));

        // soft delete user roles
        Set<Long> userRoleIds =
                user.getUserRoles().stream().map(BaseEntity::getId).collect(Collectors.toSet());
        userRoleRepository.softDeleteAllByIds(userRoleIds);
        // soft delete user
        userRepository.softDeleteAllByIds(Set.of(id));
        return id;
    }

    @Override
    @Transactional
    public void deleteManyUsers(UserManyDeleteRequestDto req) {
        Set<Long> userIds = new HashSet<>(req.getIds());
        if (userIds.isEmpty()) {
            return;
        }
        List<UserEntity> users = userRepository.findAllById(req.getIds());
        if (users.size() != userIds.size()) {
            throw new ResourceNotFoundException("error.user.not-found");
        }
        Set<Long> userRoleIds = users.stream()
                .flatMap(user -> user.getUserRoles().stream())
                .map(BaseEntity::getId)
                .collect(Collectors.toSet());
        userRoleRepository.softDeleteAllByIds(userRoleIds);
        userRepository.softDeleteAllByIds(new HashSet<>(req.getIds()));
    }

    @Override
    @Transactional
    public Long updateUser(UserUpdateRequestDto req) {
        // check user
        UserEntity user = userRepository
                .findById(req.getId())
                .orElseThrow(() -> new ResourceNotFoundException("error.user.not-found"));
        user.setStatus(req.getStatus());
        user.setFullName(req.getFullName());

        // check role ids
        if (!req.getRoleIds().isEmpty()) {
            // update user roles
            List<RoleEntity> roles = roleRepository.findAllById(req.getRoleIds());
            // valid role ids
            if (roles.size() != req.getRoleIds().size()) {
                throw new ResourceNotFoundException("error.role.not-found");
            }
            // get current user roles
            List<UserRoleEntity> currentUserRoles = userRoleRepository.findAllById(
                    user.getUserRoles().stream().map(BaseEntity::getId).toList());
            Set<Long> currentRoleIds = currentUserRoles.stream()
                    .map(userRole -> userRole.getRole().getId())
                    .collect(Collectors.toSet());
            // new role ids
            Set<Long> newRoleIds = new HashSet<>(req.getRoleIds());
            // remove roles that are not in new role ids
            Set<Long> rolesToDelete = new HashSet<>(currentRoleIds);
            rolesToDelete.removeAll(newRoleIds);

            if (!rolesToDelete.isEmpty()) {
                Set<Long> rolesToDeleteEntities = user.getUserRoles().stream()
                        .filter(userRole ->
                                rolesToDelete.contains(userRole.getRole().getId()))
                        .map(UserRoleEntity::getId)
                        .collect(Collectors.toSet());
                userRoleRepository.softDeleteAllByIds(rolesToDeleteEntities);
            }
            // add new roles
            List<Long> rolesToAdd = newRoleIds.stream()
                    .filter(roleId -> !currentRoleIds.contains(roleId))
                    .toList();
            if (!rolesToAdd.isEmpty()) {
                List<UserRoleEntity> newUserRoles = rolesToAdd.stream()
                        .map(roleId -> {
                            UserRoleEntity userRole = new UserRoleEntity();
                            userRole.setUser(user);
                            userRole.setRole(roleRepository
                                    .findById(roleId)
                                    .orElseThrow(() -> new ResourceNotFoundException("error.role.not-found")));
                            return userRole;
                        })
                        .toList();
                userRoleRepository.saveAll(newUserRoles);
            }
        } else {
            // if no role ids, remove all user-roles
            userRoleRepository.softDeleteAllByIds(
                    user.getUserRoles().stream().map(BaseEntity::getId).collect(Collectors.toSet()));
        }
        userRepository.save(user);

        return req.getId();
    }
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/JwtService.java
================
package dev.edu.ngochandev.authservice.services;

import com.nimbusds.jose.JOSEException;
import dev.edu.ngochandev.authservice.commons.enums.TokenType;
import dev.edu.ngochandev.authservice.entities.InvalidatedTokenEntity;
import dev.edu.ngochandev.authservice.entities.UserEntity;
import java.text.ParseException;
import java.util.Date;

public interface JwtService {
    String generateToken(UserEntity user, TokenType type) throws JOSEException;

    boolean validateToken(String token, TokenType type) throws JOSEException, ParseException;

    String extractUsername(String token) throws ParseException;

    String extractJti(String token) throws ParseException;

    Date extractExpiration(String token) throws ParseException;

    String disableToken(InvalidatedTokenEntity invalidatedToken);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/MailService.java
================
package dev.edu.ngochandev.authservice.services;

import dev.edu.ngochandev.authservice.entities.MailEntity;
import java.util.Map;

public interface MailService {
    boolean sendMail(MailEntity mail, String templateName, Map<String, Object> variables);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/PermissionService.java
================
package dev.edu.ngochandev.authservice.services;

import dev.edu.ngochandev.common.dtos.res.PageResponseDto;
import dev.edu.ngochandev.common.dtos.req.SimpleFilterRequestDto;
import dev.edu.ngochandev.authservice.dtos.res.PermissionResponseDto;

public interface PermissionService {
    PageResponseDto<PermissionResponseDto> getAllPermissions(SimpleFilterRequestDto filter);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/RoleService.java
================
package dev.edu.ngochandev.authservice.services;

import dev.edu.ngochandev.authservice.dtos.req.RoleCreateRequestDto;
import dev.edu.ngochandev.authservice.dtos.req.RoleManyDeleteRequestDto;
import dev.edu.ngochandev.common.dtos.res.PageResponseDto;
import dev.edu.ngochandev.common.dtos.req.SimpleFilterRequestDto;
import dev.edu.ngochandev.authservice.dtos.res.RoleDetailResponseDto;
import dev.edu.ngochandev.authservice.dtos.res.RoleSummaryResponseDto;

public interface RoleService {
    PageResponseDto<RoleSummaryResponseDto> getAllRoles(SimpleFilterRequestDto filter);

    RoleDetailResponseDto getRoleById(Long id);

    Long createRole(RoleCreateRequestDto req);

    Long deleteRoleById(Long id);

    void deleteManyRoles(RoleManyDeleteRequestDto req);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/services/UserService.java
================
package dev.edu.ngochandev.authservice.services;

import dev.edu.ngochandev.authservice.dtos.req.AdminUserCreateRequestDto;
import dev.edu.ngochandev.common.dtos.res.PageResponseDto;
import dev.edu.ngochandev.common.dtos.req.AdvancedFilterRequestDto;
import dev.edu.ngochandev.authservice.dtos.req.UserManyDeleteRequestDto;
import dev.edu.ngochandev.authservice.dtos.req.UserUpdateRequestDto;
import dev.edu.ngochandev.authservice.dtos.res.AdminUserResponse;

public interface UserService {
    PageResponseDto<AdminUserResponse> listUsers(AdvancedFilterRequestDto filter);

    Long createUser(AdminUserCreateRequestDto req);

    Long deleteUser(Long id);

    void deleteManyUsers(UserManyDeleteRequestDto req);

    Long updateUser(UserUpdateRequestDto req);
}

================
File: services/auth-service/src/main/java/dev/edu/ngochandev/authservice/specifications/UserSpecification.java
================
package dev.edu.ngochandev.authservice.specifications;

import dev.edu.ngochandev.authservice.commons.MyUtils;
import dev.edu.ngochandev.common.dtos.req.AdvancedFilterRequestDto;
import dev.edu.ngochandev.authservice.entities.UserEntity;
import dev.edu.ngochandev.authservice.exceptions.FilterDataException;
import jakarta.persistence.criteria.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.orm.jpa.JpaSystemException;
import org.springframework.util.StringUtils;

public class UserSpecification implements Specification<UserEntity> {
    private final List<AdvancedFilterRequestDto.FilterData> filterData;
    private final String search;

    public UserSpecification(List<AdvancedFilterRequestDto.FilterData> filterData, String search) {
        this.filterData = filterData;
        this.search = search;
    }

    @Override
    public Predicate toPredicate(Root<UserEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
        List<Predicate> predicates = new ArrayList<>();

        // search
        if (StringUtils.hasLength(search)) {
            String searchPattern = "%" + search.toLowerCase() + "%";
            Predicate searchPredicate = cb.or(
                    cb.like(cb.lower(root.get("username")), searchPattern),
                    cb.like(cb.lower(root.get("email")), searchPattern),
                    cb.like(cb.lower(root.get("fullName")), searchPattern));
            predicates.add(searchPredicate);
        }
        // filter
        if (filterData != null && !filterData.isEmpty()) {
            for (AdvancedFilterRequestDto.FilterData filter : filterData) {
                String field = null;
                Class<?> fieldType = null;
                try {
                    field = filter.getField();
                    fieldType = root.get(field).getJavaType();
                    if (fieldType == null) {
                        throw new FilterDataException(String.format(
                                "Invalid filter field: %s does not exist in UserEntity", field));
                    }

                    if (filter.getValue().getClass().isAssignableFrom(fieldType)
                            || fieldType.isAssignableFrom(List.class)) {
                        throw new FilterDataException(String.format(
                                "Invalid filter value for field: %s must be of type %s or List<%s>",
                                field, fieldType.getSimpleName(), fieldType.getSimpleName()));
                    }

                    switch (filter.getOperator()) {
                        case EQUALS -> predicates.add(cb.equal(root.get(field), filter.getValue()));
                        case CONTAINS -> predicates.add(
                                cb.like(root.get(field), "%" + ((String) filter.getValue()).toLowerCase() + "%"));
                        case GREATER_THAN -> predicates.add(
                                cb.greaterThan(root.get(field), (Comparable) filter.getValue()));
                        case LESS_THAN -> predicates.add(cb.lessThan(root.get(field), (Comparable) filter.getValue()));
                        case BETWEEN -> {
                            List<?> valueList = (List<?>) filter.getValue();
                            if (fieldType == LocalDateTime.class) {
                                LocalDateTime start = MyUtils.parseFlexibleDate(
                                        valueList.get(0).toString());
                                LocalDateTime end = MyUtils.parseFlexibleDate(
                                        valueList.get(1).toString());
                                predicates.add(cb.between(root.get(field), start, end));
                            } else if ((fieldType == Integer.class)
                                    || (fieldType == int.class)
                                    || (fieldType == Long.class)
                                    || (fieldType == long.class)) {
                                Expression<Integer> expression = root.get(field);
                                Integer lower =
                                        Integer.parseInt(valueList.get(0).toString());
                                Integer upper =
                                        Integer.parseInt(valueList.get(1).toString());
                                predicates.add(cb.between(expression, lower, upper));
                            }
                        }
                        case IN -> {
                            if (filter.getValue() instanceof List<?> list && !list.isEmpty()) {
                                predicates.add(root.get(field).in(list));
                            }
                        }
                    }
                } catch (JpaSystemException e) {
                    throw new FilterDataException(String.format(
                            "Invalid filter value for field: %s must be of type %s or List<%s>",
                            field, fieldType.getSimpleName(), fieldType.getSimpleName()));
                } catch (FilterDataException e) {
                    throw e;
                }
            }
        }

        return cb.and(predicates.toArray(new Predicate[0]));
    }
}

================
File: services/auth-service/src/main/resources/application.yml
================
spring:
  application:
    name: auth-service
  datasource:
    url: ${AUTH_DB_URL}${AUTH_DB_NAME}
    username: ${AUTH_DB_USER}
    password: ${AUTH_DB_PASSWORD}
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    hibernate:
      ddl-auto: update
  mail:
    port: 587
    host: smtp.gmail.com
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    protocol: smtp
    default-encoding: UTF-8
    properties:
      mail:
        smtp:
          auth: true
          connection-timeout: 5000
          write-timeout: 5000
          timeout: 5000
          starttls:
            enable: true
  kafka:
    bootstrap-servers: localhost:9094
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
server:
  port: 8080


jwt:
  access-token-secret: ${ACCESS_TOKEN_SECRET}
  forgot-password-token-secret: ${FORGOT_PASSWORD_TOKEN_SECRET}
  refresh-token-secret: ${REFRESH_TOKEN_SECRET}
  email-verification-token-secret: ${EMAIL_VERIFICATION_TOKEN_SECRET}
  access-expiration: 180 # 3 hours
  refresh-expiration: 4320 # 3 days
  forgot-password-expiration: 30 # 30 minutes
  email-verification-expiration: 1440 # 24 hours
  issuer: ngochandev

app:
  security:
    internal-secret-key: ${INTERNAL_SECRET_KEY}
  frontend:
    main-url: http://localhost:3000
  super-admin:
    username: ${SUPER_ADMIN_USERNAME:superadmin}
    password: ${SUPER_ADMIN_PASSWORD:superadmin}
    email: ${SUPER_ADMIN_EMAIL:superadmin@gmail.com}
    full-name: ${SUPER_ADMIN_FULLNAME:Super Administrator}
logging:
  level:
    org.springframework.security: DEBUG
    DATA-INITIALIZER: DEBUG

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
openapi:
  service:
    api-docs: auth-service
    server: http://localhost:${server.port}
    title: Auth Service
    version: 1.0.0

================
File: services/auth-service/src/main/resources/banner.txt
================
,---.            ,--.  ,--.       ,---.                         ,--.
/  O  \ ,--.,--.,-'  '-.|  ,---.  '   .-' ,---. ,--.--.,--.  ,--.`--' ,---. ,---.
|  .-.  ||  ||  |'-.  .-'|  .-.  | `.  `-.| .-. :|  .--' \  `'  / ,--.| .--'| .-. :
|  | |  |'  ''  '  |  |  |  | |  | .-'    \   --.|  |     \    /  |  |\ `--.\   --.
`--' `--' `----'   `--'  `--' `--' `-----' `----'`--'      `--'   `--' `---' `----'

${application.title} ${application.version}
Powered by Spring Boot ${spring-boot.version}

================
File: services/auth-service/src/main/resources/messages_auth_vi.properties
================
# errors
error.duplicate.email=Email đã được sử dụng
error.duplicate.username=Tên đăng nhập đã được sử dụng
error.invalid.username-or-email=Tên đăng nhập hoặc email không hợp lệ
error.identifier.not-blank=Identifier không được để trống
error.password.not-blank=Mật khẩu không được để trống
error.username.not-blank=Tên đăng nhập không được để trống
error.email.not-blank=Email không được để trống
error.email.invalid=Email không hợp lệ
error.password.too-short=Mật khẩu phải có ít nhất 8 ký tự
error.user-id.not-null=ID người dùng không được để null
error.user-id.invalid=ID người dùng không hợp lệ
error.invalid.old-password=Mật khẩu cũ không hợp lệ
error.passwords.not-match=Mật khẩu mới và xác nhận không khớp
error.role.name.not-blank=Tên vai trò không được để trống
error.permission.not.found=Không tìm thấy quyền
error.role.not.found=Không tìm thấy vai trò
user.status.not-null=Trạng thái người dùng không được để null
error.role.not-found=Không tìm thấy vai trò
error.user.inactive=Người dùng chưa kích hoạt tài khoản, vui lòng kích hoạt tài khoản của bạn
error.user.blocked=Tài khoản của bạn đã bị khoá, vui lòng liên hệ hỗ trợ
error.unauthorized=Bạn không có quyền truy cập vào tài nguyên này

# responses
user.register.success=Đăng ký người dùng thành công, vui lòng xác minh email
user.authenticate.success=Xác thực người dùng thành công
user.change-password.success=Đổi mật khẩu thành công
user.refresh-token.success=Làm mới token thành công
user.logout.success=Đăng xuất người dùng thành công
user.forgot-password.success=Đã gửi email đặt lại mật khẩu
user.reset-password.success=Đặt lại mật khẩu thành công
permission.list.success=Truy cập danh sách quyền thành công
role.list.success=Truy cập danh sách vai trò thành công
role.create.success=Tạo vai trò thành công
role.get.success=Lấy thông tin vai trò thành công
role.delete.success=Xoá vai trò thành công
user.create.success=Tạo người dùng thành công
user.delete.success=Xoá người dùng thành công
user.verify-token.success=Xác minh token thành công

# permission
permission.user.change-password=Đổi mật khẩu người dùng
permission.user.refresh-token=Làm mới token người dùng
permission.user.logout=Đăng xuất người dùng
permission.user.list=Truy cập danh sách người dùng
permission.user.create=Tạo người dùng
permission.user.update=Cập nhật người dùng
permission.user.delete=Xoá người dùng
permission.user.delete-many=Xoá nhiều người dùng
permission.permission-list=Truy cập danh sách quyền
permission.role.list=Truy cập danh sách vai trò
permission.role.create=Tạo vai trò
permission.role.get-detail=Lấy thông tin chi tiết vai trò
permission.role.delete=Xoá vai trò
permission.role.delete-many=Xoá nhiều vai trò
user.profile.get-me=Lấy thông tin cá nhân

================
File: services/auth-service/src/main/resources/messages_auth.properties
================
# errors
error.duplicate.email=Email already in use
error.duplicate.username=Username already in use
error.invalid.username-or-email=Invalid username or email
error.identifier.not-blank=Identifier must not be blank
error.password.not-blank=Password must not be blank
error.username.not-blank=Username must not be blank
error.email.not-blank=Email must not be blank
error.email.invalid=Email is invalid
error.password.too-short=Password must be at least 8 characters long
error.user-id.not-null=User ID must not be null
error.user-id.invalid=User ID is invalid
error.invalid.old-password=Old password is invalid
error.passwords.not-match=New password and confirmation do not match
error.role.name.not-blank=Role name must not be blank
error.permission.not.found=Permission not found
error.role.not.found=Role not found
user.status.not-null=User status must not be null
error.role.not-found=Role not found
error.user.inactive=User is inactive, please activate your account
error.user.blocked=Your account has been blocked, please contact support
error.unauthorized=Unauthorized access

# responses
user.register.success=User registration successful, please verify your email
user.authenticate.success=User authentication successful
user.change-password.success=Password changed successfully
user.refresh-token.success=Token refreshed successfully
user.logout.success=User logged out successfully
user.forgot-password.success=Password reset link sent to email
user.reset-password.success=Password reset successfully
permission.list.success=Accessed permission list successfully
role.list.success=Accessed role list successfully
role.create.success=Role created successfully
role.get.success=Role retrieved successfully
role.delete.success=Role deleted successfully
user.create.success=User created successfully
user.delete.success=User deleted successfully
user.verify-token.success=Token verified successfully

#permission
permission.user.change-password=Change user password
permission.user.refresh-token=Refresh user token
permission.user.logout=Logout user
permission.user.list=Access user list
permission.user.create=Create user
permission.user.delete=Delete user
permission.user.delete-many=Delete multiple users
permission.user.update=Update user
permission.permission-list=Access permission list
permission.role.list=Access role list
permission.role.create=Create role
permission.role.get-detail=Get role detail
permission.role.delete=Delete role
permission.role.delete-many=Delete multiple roles
user.profile.get-me=Get user profile

================
File: services/auth-service/src/main/resources/migrations/permissions.json
================
[
{
	"nameKey": "permission.user.change-password",
	"apiPath": "/api/auth/change-password",
	"method": "PATCH",
	"module": "user",
	"isDefault": true
},
{
	"nameKey": "permission.user.refresh-token",
	"apiPath": "/api/auth/refresh-token",
	"method": "POST",
	"module": "user",
	"isDefault": true
},
{
	"nameKey": "permission.user.logout",
	"apiPath": "/api/auth/logout",
	"method": "POST",
	"module": "user",
	"isDefault": true
},
{
	"nameKey": "permission.user.list",
	"apiPath": "/api/v1/users/list",
	"method": "POST",
	"module": "user",
	"isDefault": false
},
{
	"nameKey": "permission.user.create",
	"apiPath": "/api/v1/users",
	"method": "POST",
	"module": "user",
	"isDefault": false
},
{
	"nameKey": "permission.user.update",
	"apiPath": "/api/v1/users/update",
	"method": "PUT",
	"module": "user",
	"isDefault": false
},
{
	"nameKey": "permission.user.delete",
	"apiPath": "/api/v1/users/*",
	"method": "DELETE",
	"module": "user",
	"isDefault": false
},
{
	"nameKey": "permission.user.delete-many",
	"apiPath": "/api/v1/users/batch",
	"method": "DELETE",
	"module": "user",
	"isDefault": false
},
{
	"nameKey": "permission.role.list",
	"apiPath": "/api/v1/roles/list",
	"method": "POST",
	"module": "role",
	"isDefault": false
},
{
	"nameKey": "permission.role.create",
	"apiPath": "/api/v1/roles",
	"method": "POST",
	"module": "role",
	"isDefault": false
},
{
	"nameKey": "permission.role.get-detail",
	"apiPath": "/api/v1/roles/*",
	"method": "GET",
	"module": "role",
	"isDefault": false
},
{
	"nameKey": "permission.role.delete",
	"apiPath": "/api/v1/roles/*",
	"method": "DELETE",
	"module": "role",
	"isDefault": false
},
{
	"nameKey": "permission.role.delete-many",
	"apiPath": "/api/v1/roles/batch",
	"method": "DELETE",
	"module": "role",
	"isDefault": false
},
{
	"nameKey": "permission.permission-list",
	"apiPath": "/api/v1/permissions/list",
	"method": "POST",
	"module": "permission",
	"isDefault": false
},
	{
		"nameKey": "user.profile.get-me",
		"apiPath": "/api/v1/user-profile/me",
		"method": "GET",
		"module": "user",
		"isDefault": true
	},
	{
		"nameKey": "user.profile.update",
		"apiPath": "/api/v1/user-profile",
		"method": "PATCH",
		"module": "user",
		"isDefault": true
	}
]

================
File: services/auth-service/src/main/resources/templates/email/email-verification-mail.html
================
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
	<meta charset="UTF-8">
	<title>Xác nhận đăng ký</title>
	<style>
		body { font-family: Arial, sans-serif; }
		.container { padding: 20px; }
		.button {
			display: inline-block;
			padding: 10px 20px;
			font-size: 16px;
			color: #fff;
			background-color: #007bff;
			text-decoration: none;
			border-radius: 5px;
		}
	</style>
</head>
<body>
<div class="container">
	<p>Chào <strong th:text="${fullName}"></strong>,</p>

	<p>Bạn đã đăng ký tài khoản mới tại E-learning System, vui lòng ấn vào nút bên dưới để xac nhận đăng ký:</p>

	<a th:href="${verificationLink}" class="button">Xác nhận đăng ký</a>

	<p>Liên kết này sẽ hết hạn sau 24 giờ.</p>

	<p>Nếu bạn không yêu cầu điều này, vui lòng bỏ qua email này.</p>

	<p>Trân trọng,<br/>Đội ngũ hỗ trợ.</p>
</div>
</body>
</html>

================
File: services/auth-service/src/main/resources/templates/email/forgot-password-mail.html
================
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
	<meta charset="UTF-8">
	<title>Yêu cầu đặt lại mật khẩu</title>
	<style>
		body { font-family: Arial, sans-serif; }
		.container { padding: 20px; }
		.button {
			display: inline-block;
			padding: 10px 20px;
			font-size: 16px;
			color: #fff;
			background-color: #007bff;
			text-decoration: none;
			border-radius: 5px;
		}
	</style>
</head>
<body>
<div class="container">
	<p>Chào <strong th:text="${fullName}">John Doe</strong>,</p>

	<p>Bạn đã yêu cầu đặt lại mật khẩu cho tài khoản của mình. Vui lòng nhấp vào nút bên dưới để tiếp tục:</p>

	<a th:href="${resetLink}" class="button">Đặt lại mật khẩu</a>

	<p>Liên kết này sẽ hết hạn sau 5 phút.</p>

	<p>Nếu bạn không yêu cầu điều này, vui lòng bỏ qua email này.</p>

	<p>Trân trọng,<br/>Đội ngũ hỗ trợ.</p>
</div>
</body>
</html>

================
File: services/auth-service/src/test/java/dev/edu/ngochandev/authservice/AbsIntegrationTest.java
================
package dev.edu.ngochandev.authservice;

import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

@Testcontainers
@ActiveProfiles("test")
@SpringBootTest
@AutoConfigureMockMvc
public class AbsIntegrationTest {
    @Container
    static final PostgreSQLContainer<?> POSTGRES_SQL_CONTAINER;

    static {
        POSTGRES_SQL_CONTAINER = new PostgreSQLContainer<>("postgres:16-alpine");
        POSTGRES_SQL_CONTAINER.start();
    }

    @DynamicPropertySource
    static void configureDataSource(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", POSTGRES_SQL_CONTAINER::getJdbcUrl);
        registry.add("spring.datasource.username", POSTGRES_SQL_CONTAINER::getUsername);
        registry.add("spring.datasource.password", POSTGRES_SQL_CONTAINER::getPassword);
        registry.add("spring.jpa.hibernate.ddl-auto", () -> "update");
    }
}

================
File: services/auth-service/src/test/java/dev/edu/ngochandev/authservice/AuthIntegrationTest.java
================
package dev.edu.ngochandev.authservice;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import dev.edu.ngochandev.authservice.commons.DataInitializer;
import dev.edu.ngochandev.authservice.dtos.req.*;
import dev.edu.ngochandev.authservice.entities.UserEntity;
import dev.edu.ngochandev.authservice.entities.UserRoleEntity;
import dev.edu.ngochandev.authservice.repositories.InvalidatedTokenRepository;
import dev.edu.ngochandev.authservice.repositories.RoleRepository;
import dev.edu.ngochandev.authservice.repositories.UserRepository;
import dev.edu.ngochandev.authservice.repositories.UserRoleRepository;
import dev.edu.ngochandev.authservice.services.JwtService;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;

@Slf4j(topic = "USER-INTEGRATION-TEST")
class AuthIntegrationTest extends AbsIntegrationTest {
    private final ObjectMapper objectMapper;
    private final MockMvc mockMvc;
    private final UserRepository userRepository;
    private final UserRoleRepository userRoleRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtService jwtService;
    private final InvalidatedTokenRepository invalidatedTokenRepository;

    @Autowired
    public AuthIntegrationTest(
            ObjectMapper objectMapper,
            MockMvc mockMvc,
            UserRepository userRepository,
            UserRoleRepository userRoleRepository,
            RoleRepository roleRepository,
            PasswordEncoder passwordEncoder,
            JwtService jwtService,
            InvalidatedTokenRepository invalidatedTokenRepository) {
        this.objectMapper = objectMapper;
        this.mockMvc = mockMvc;
        this.userRepository = userRepository;
        this.userRoleRepository = userRoleRepository;
        this.roleRepository = roleRepository;
        this.passwordEncoder = passwordEncoder;
        this.jwtService = jwtService;
        this.invalidatedTokenRepository = invalidatedTokenRepository;
    }

    @BeforeEach
    void setUp() {
        userRepository.deleteAll();
        log.info("Database cleaned up before test.");
    }

    // =================================================================
    // == TEST CASES FOR /api/auth/register
    // =================================================================
    @Test
    void registerNewUser_validData_success(TestInfo testInfo) throws Exception {
        log.info("============Starting test: {} ============", testInfo.getDisplayName());
        // Arrange
        log.info("[ARRANGE] Preparing request data for user registration");
        UserRegisterRequestDto req = new UserRegisterRequestDto();
        req.setEmail("test@test.com");
        req.setPassword("password123");
        req.setFullName("Test User");
        req.setUsername("testuser");
        String requestJson = objectMapper.writeValueAsString(req);
        log.debug("[ARRANGE] Request JSON: {}", requestJson);
        // Act
        log.info("[Act] Performing POST request to /api/auth/register.");
        ResultActions response = mockMvc.perform(post("/api/auth/register")
                .contentType(MediaType.APPLICATION_JSON_VALUE)
                .content(requestJson));
        // Assert
        log.info("[Assert] Validating response status and content.");
        response.andExpect(status().isCreated())
                .andExpect(jsonPath("status").value(201))
                .andExpect(jsonPath("message").value(Translator.translate("user.register.success")));
        log.debug(
                "[Assert] Response content: {}",
                response.andReturn().getResponse().getContentAsString());

        log.info("============Test {} completed successfully. ============", testInfo.getDisplayName());
    }

    @Test
    void whenRegister_withDuplicateEmail_thenReturns409Conflict(TestInfo testInfo) throws Exception {
        log.info("==========> STARTING TEST: {} <==========", testInfo.getDisplayName());

        // Arrange create a user with an existing email
        userRepository.save(UserEntity.builder()
                .username("existing")
                .email("duplicate.email@example.com")
                .password("pwd")
                .fullName("name")
                .build());

        UserRegisterRequestDto req = new UserRegisterRequestDto();
        req.setUsername("newuser");
        req.setFullName("New User");
        req.setEmail("duplicate.email@example.com");
        req.setPassword("password123");

        // Act & Assert
        mockMvc.perform(post("/api/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isConflict())
                .andExpect(jsonPath("$.message").value(Translator.translate("error.duplicate.email")));

        log.info("==========> FINISHED TEST: {} - SUCCESS <==========", testInfo.getDisplayName());
    }

    @Test
    void whenRegister_withShortPassword_thenReturns400BadRequest(TestInfo testInfo) throws Exception {
        log.info("==========> STARTING TEST: {} <==========", testInfo.getDisplayName());

        // Arrange
        UserRegisterRequestDto req = new UserRegisterRequestDto();
        req.setUsername("newuser");
        req.setFullName("New User");
        req.setEmail("new.user@example.com");
        req.setPassword("123");

        // Act & Assert
        mockMvc.perform(post("/api/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.errors.password").value(Translator.translate("error.password.too-short")));

        log.info("==========> FINISHED TEST: {} - SUCCESS <==========", testInfo.getDisplayName());
    }

    // =================================================================
    // == TEST CASES FOR /api/auth/authenticate
    // =================================================================
    @Test
    void whenAuthenticate_withValidCredentials_thenReturns200AndTokens(TestInfo testInfo) throws Exception {
        log.info("==========> STARTING TEST: {} <==========", testInfo.getDisplayName());

        // Arrange prepare a user for authentication
        userRepository.save(UserEntity.builder()
                .username("loginuser")
                .email("login.user@example.com")
                .password(passwordEncoder.encode("correctpassword"))
                .fullName("Login User")
                .build());

        AuthenticationRequestDto req = new AuthenticationRequestDto();
        req.setIdentifier("loginuser");
        req.setPassword("correctpassword");

        // Act & Assert
        mockMvc.perform(post("/api/auth/authenticate")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.accessToken").exists())
                .andExpect(jsonPath("$.data.refreshToken").exists());

        log.info("==========> FINISHED TEST: {} - SUCCESS <==========", testInfo.getDisplayName());
    }

    @Test
    void whenAuthenticate_withInvalidPassword_thenReturns401Unauthorized(TestInfo testInfo) throws Exception {
        log.info("==========> STARTING TEST: {} <==========", testInfo.getDisplayName());
        // Arrange
        userRepository.save(UserEntity.builder()
                .username("loginuser")
                .email("login.user@example.com")
                .password(passwordEncoder.encode("correctpassword"))
                .fullName("Login User")
                .build());

        AuthenticationRequestDto req = new AuthenticationRequestDto();
        req.setIdentifier("loginuser");
        req.setPassword("wrongpassword");

        // Act & Assert
        mockMvc.perform(post("/api/auth/authenticate")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isUnauthorized())
                .andExpect(jsonPath("$.message").value(Translator.translate("error.invalid.username-or-email")));

        log.info("==========> FINISHED TEST: {} - SUCCESS <==========", testInfo.getDisplayName());
    }

    // =================================================================
    // == TEST CASES FOR /api/auth/change-password
    // =================================================================
    @Test
    void whenChangePassword_withValidData_thenReturns200OK(TestInfo testInfo) throws Exception {
        log.info("==========> STARTING TEST: {} <==========", testInfo.getDisplayName());
        // Arrange create a user and get access token
        UserEntity user = userRepository.save(UserEntity.builder()
                .username("changepass")
                .email("changepass@example.com")
                .password(passwordEncoder.encode("oldPassword123"))
                .fullName("Change Password User")
                .build());
        // assign change-password permission to the user
        assignDefaultRoleToUser(user);

        Map<String, String> tokens = getAuthTokens("changepass", "oldPassword123");

        UserChangePasswordRequestDto req = new UserChangePasswordRequestDto();
        req.setUserId(user.getId());
        req.setOldPassword("oldPassword123");
        req.setNewPassword("newPassword456");
        req.setConfirmPassword("newPassword456");

        // Act & Assert
        mockMvc.perform(patch("/api/auth/change-password")
                        .header("Authorization", "Bearer " + tokens.get("accessToken"))
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value(Translator.translate("user.change-password.success")));

        log.info("==========> FINISHED TEST: {} - SUCCESS <==========", testInfo.getDisplayName());
    }

    // =================================================================
    // == TEST CASES FOR /api/auth/refresh-token
    // =================================================================
    @Test
    void whenRefreshToken_withValidToken_thenReturns200AndNewTokens(TestInfo testInfo) throws Exception {
        log.info("==========> STARTING TEST: {} <==========", testInfo.getDisplayName());

        // Arrange prepare a user and get initial tokens
        UserEntity savedUser = userRepository.save(UserEntity.builder()
                .username("refresher")
                .password(passwordEncoder.encode("pass123"))
                .email("ref@test.com")
                .fullName("n")
                .build());
        assignDefaultRoleToUser(savedUser);
        Map<String, String> tokens = getAuthTokens("refresher", "pass123");
        String oldRefreshTokenJti = jwtService.extractJti(tokens.get("refreshToken"));

        AuthRefreshTokenRequestDto req = new AuthRefreshTokenRequestDto();
        req.setToken(tokens.get("refreshToken"));

        // Act
        MvcResult result = mockMvc.perform(post("/api/auth/refresh-token")
                        .header("Authorization", "Bearer " + tokens.get("accessToken"))
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isOk())
                .andReturn();

        // Assert
        JsonNode responseNode = objectMapper.readTree(result.getResponse().getContentAsString());
        String newAccessToken = responseNode.path("data").path("accessToken").asText();
        String newRefreshToken = responseNode.path("data").path("refreshToken").asText();

        assertThat(newAccessToken).isNotNull().isNotEqualTo(tokens.get("accessToken"));
        assertThat(newRefreshToken).isNotNull().isNotEqualTo(tokens.get("refreshToken"));

        // Verify that the old refresh token is invalidated
        assertThat(invalidatedTokenRepository.existsById(oldRefreshTokenJti)).isTrue();

        log.info("==========> FINISHED TEST: {} - SUCCESS <==========", testInfo.getDisplayName());
    }

    // =================================================================
    // == TEST CASES FOR /api/auth/logout
    // =================================================================

    @Test
    void whenLogout_withValidToken_thenInvalidatesToken(TestInfo testInfo) throws Exception {
        log.info("==========> STARTING TEST: {} <==========", testInfo.getDisplayName());
        // Arrange
        UserEntity savedUser = userRepository.save(UserEntity.builder()
                .username("logoutuser")
                .password(passwordEncoder.encode("pass123"))
                .email("logout@test.com")
                .fullName("n")
                .build());
        assignDefaultRoleToUser(savedUser);
        Map<String, String> tokens = getAuthTokens("logoutuser", "pass123");
        String accessTokenToLogout = tokens.get("accessToken");
        String accessTokenJti = jwtService.extractJti(accessTokenToLogout);

        AuthLogoutRequestDto req = new AuthLogoutRequestDto();
        req.setToken(accessTokenToLogout);

        // Act
        mockMvc.perform(post("/api/auth/logout")
                        .header("Authorization", "Bearer " + accessTokenToLogout)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isOk());

        // Assert:
        // 1. Check token is invalidated
        assertThat(invalidatedTokenRepository.existsById(accessTokenJti)).isTrue();

        // 2. try to access a protected endpoint with the invalidated token
        mockMvc.perform(
                        post("/api/v1/users/list") // checking a protected endpoint
                                .header("Authorization", "Bearer " + accessTokenToLogout)
                                .contentType(MediaType.APPLICATION_JSON)
                                .content("{}"))
                .andExpect(status().isUnauthorized()); // must return 401 Unauthorized

        log.info("==========> FINISHED TEST: {} - SUCCESS <==========", testInfo.getDisplayName());
    }

    //    helper method to get authentication tokens
    private void assignDefaultRoleToUser(UserEntity user) {
        UserRoleEntity userRole = new UserRoleEntity();
        userRole.setUser(user);
        userRole.setRole(roleRepository
                .findByName(DataInitializer.DEFAULT_ROLE)
                .orElseThrow(() -> new RuntimeException("Default role not found")));
        userRoleRepository.save(userRole);
        log.info("Assigned default role to user: {}", user.getUsername());
    }

    private Map<String, String> getAuthTokens(String username, String password) throws Exception {
        AuthenticationRequestDto authReq = new AuthenticationRequestDto();
        authReq.setIdentifier(username);
        authReq.setPassword(password);

        MvcResult result = mockMvc.perform(post("/api/auth/authenticate")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(authReq)))
                .andExpect(status().isOk())
                .andReturn();

        String responseBody = result.getResponse().getContentAsString();
        JsonNode root = objectMapper.readTree(responseBody);
        return Map.of(
                "accessToken", root.path("data").path("accessToken").asText(),
                "refreshToken", root.path("data").path("refreshToken").asText());
    }
}

================
File: services/auth-service/src/test/resources/application-test.properties
================
jwt.access-token-secret=daylachuoibimatcuatoidanhchoravieclonla123456789
jwt.forgot-password-token-secret=daylachuoibimatcuatoidanhchoravieclonla123456789
jwt.refresh-token-secret=daylachuoibimatcuatoidanhchoravieclonla123456789
jwt.email-verification-token-secret=daylachuoibimatcuatoidanhchoravieclonla123456789

jwt.access-expiration=1
jwt.refresh-expiration=2
jwt.forgot-password-expiration=1
jwt.email-verification-expiration=1
jwt.issuer=ngochandev-test

spring.mail.host=localhost
spring.mail.port=25
spring.mail.username=
spring.mail.password=
spring.jpa.show-sql=false

================
File: services/common-lib/pom.xml
================
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>dev.edu.ngochandev</groupId>
        <artifactId>elearning-platform</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>

    <artifactId>common-lib</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>common-library</name>
    <description>Shared components for all services</description>
    <packaging>jar</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <!--        Validation-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
        </dependency>
    </dependencies>
</project>

================
File: services/common-lib/src/main/java/dev/edu/ngochandev/common/dtos/req/AdvancedFilterRequestDto.java
================
package dev.edu.ngochandev.common.dtos.req;

import java.util.List;

import dev.edu.ngochandev.common.enums.OperatorFilter;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class AdvancedFilterRequestDto extends SimpleFilterRequestDto  {

    private List<FilterData> filters = List.of();

    @Getter
    @Setter
    public static class FilterData {
        private String field;
        private OperatorFilter operator;
        private Object value;
    }
}

================
File: services/common-lib/src/main/java/dev/edu/ngochandev/common/dtos/req/SimpleFilterRequestDto.java
================
package dev.edu.ngochandev.common.dtos.req;

import jakarta.validation.constraints.Pattern;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class SimpleFilterRequestDto {
    private int page = 1;
    private int size = 10;
    private String search = "";

    @Pattern(regexp = "^[a-zA-Z_]\\w*:(ASC|DESC|asc|desc)$", message = "error.sort.invalid")
    private String sort = "id:DESC";
}

================
File: services/common-lib/src/main/java/dev/edu/ngochandev/common/dtos/res/ErrorResponseDto.java
================
package dev.edu.ngochandev.common.dtos.res;

import com.fasterxml.jackson.annotation.JsonInclude;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.http.HttpStatus;
import org.springframework.web.context.request.WebRequest;

@Getter
@Setter
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ErrorResponseDto {
    private int status;
    private String error;
    private String message;
    private Date timestamp;
    private String path;
    private Map<String, String> errors;

    public ErrorResponseDto(HttpStatus status, String message, WebRequest webRequest) {
        this.status = status.value();
        this.error = status.getReasonPhrase();
        this.message = message;
        this.timestamp = new Date();
        this.path = webRequest != null ? webRequest.getDescription(false).replace("uri=", "") : null;
    }

    public void addValidationError(String field, String message) {
        if (errors == null) {
            errors = new HashMap<>();
        }
        errors.put(field, message);
    }
}

================
File: services/common-lib/src/main/java/dev/edu/ngochandev/common/dtos/res/IntrospectTokenResponseDto.java
================
package dev.edu.ngochandev.common.dtos.res;

import lombok.*;

import java.util.Set;

@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class IntrospectTokenResponseDto {
    private boolean active;
    private Long userId;
    private String username;
    private Set<String> roles;
    private Set<String> permissions;
    private Long exp;
}

================
File: services/common-lib/src/main/java/dev/edu/ngochandev/common/dtos/res/PageResponseDto.java
================
package dev.edu.ngochandev.common.dtos.res;

import java.util.List;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class PageResponseDto<T> {
    private int currentPage;
    private long totalElements;
    private int totalPages;
    private List<T> items;
}

================
File: services/common-lib/src/main/java/dev/edu/ngochandev/common/dtos/res/SuccessResponseDto.java
================
package dev.edu.ngochandev.common.dtos.res;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SuccessResponseDto<T> {
    private int status;
    private String message;
    private T data;
}

================
File: services/common-lib/src/main/java/dev/edu/ngochandev/common/enums/OperatorFilter.java
================
package dev.edu.ngochandev.common.enums;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;

@Getter
public enum OperatorFilter {
    @JsonProperty("eq")
    EQUALS("eq"),
    @JsonProperty("contains")
    CONTAINS("contains"),
    @JsonProperty("gt")
    GREATER_THAN("gt"),
    @JsonProperty("lt")
    LESS_THAN("lt"),
    @JsonProperty("between")
    BETWEEN("between"),
    @JsonProperty("in")
    IN("in");

    private final String value;

    OperatorFilter(String value) {
        this.value = value;
    }
}

================
File: services/common-lib/src/main/java/dev/edu/ngochandev/common/events/UserRegisteredEvent.java
================
package dev.edu.ngochandev.common.events;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class UserRegisteredEvent {
    private Long userId;
    private String fullName;
}

================
File: services/common-lib/src/main/java/dev/edu/ngochandev/common/exceptions/DateFormatException.java
================
package dev.edu.ngochandev.common.exceptions;

public class DateFormatException extends RuntimeException {
    public DateFormatException(String message) {
        super(message);
    }
}

================
File: services/common-lib/src/main/java/dev/edu/ngochandev/common/exceptions/DuplicateResourceException.java
================
package dev.edu.ngochandev.common.exceptions;

public class DuplicateResourceException extends RuntimeException {
    public DuplicateResourceException(String message) {
        super(message);
    }
}

================
File: services/common-lib/src/main/java/dev/edu/ngochandev/common/exceptions/ResourceNotFoundException.java
================
package dev.edu.ngochandev.common.exceptions;

public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}

================
File: services/common-lib/src/main/java/dev/edu/ngochandev/common/exceptions/UnauthorizedException.java
================
package dev.edu.ngochandev.common.exceptions;

public class UnauthorizedException extends RuntimeException {
    public UnauthorizedException(String message) {
        super(message);
    }
}

================
File: services/common-lib/src/main/java/dev/edu/ngochandev/common/i18n/Translator.java
================
package dev.edu.ngochandev.common.i18n;

import lombok.RequiredArgsConstructor;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.stereotype.Component;

import java.util.Locale;

@Component
@RequiredArgsConstructor
public class Translator {
    private final MessageSource messageSource;

    public String translate(String code) {
        Locale locale = LocaleContextHolder.getLocale();
        return messageSource.getMessage(code, null, locale);
    }
}

================
File: services/common-lib/src/main/resources/messages_common_vi.properties
================
user.update.success=Cập nhật người dùng thành công
user.verify-email.success=Xác minh email thành công
user.get.success=Lấy thông tin người dùng thành công

error.access.denied=Truy cập bị từ chối
error.sort.invalid=Giá trị sắp xếp phải có dạng: {field}:[asc|desc]
error.date.invalid=Ngày phải có định dạng: dd-MM-yyyy HH:mm:ss
error.enum.invalid=Giá trị enum phải là một trong các giá trị sau:
error.token.invalid=Token không hợp lệ hoặc bị thiếu
error.token.expired=Token đã hết hạn
error.token.not-blank=Token không được để trống
error.fullname.not-blank=Tên đầy đủ không được để trống
error.user.not-found=Không tìm thấy người dùng
error.body.invalid=Yêu cầu không hợp lệ

================
File: services/common-lib/src/main/resources/messages_common.properties
================
user.update.success=User updated successfully
user.verify-email.success=Email verified successfully
user.get.success=User information retrieved successfully


error.access.denied=Access denied
error.sort.invalid=Sort value must be in the format: {field}:[asc|desc]
error.date.invalid=Date must be in the format: dd-MM-yyyy HH:mm:ss
error.enum.invalid=Enum value must be one of the following:
error.token.invalid=Token is invalid or missing
error.token.expired=Token has expired
error.token.not-blank=Token must not be blank
error.fullname.not-blank=Full name must not be blank
error.user.not-found=User not found
error.body.invalid=Invalid request body

================
File: services/gateway-service/.gitattributes
================
/mvnw text eol=lf
*.cmd text eol=crlf

================
File: services/gateway-service/.gitignore
================
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

================
File: services/gateway-service/.mvn/wrapper/maven-wrapper.properties
================
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.11/apache-maven-3.9.11-bin.zip

================
File: services/gateway-service/mvnw
================
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

================
File: services/gateway-service/mvnw.cmd
================
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

================
File: services/gateway-service/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>dev.edu.ngochandev</groupId>
        <artifactId>elearning-platform</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>./../../pom.xml</relativePath>
    </parent>
    <artifactId>gateway-service</artifactId>
    <name>gateway-service</name>
    <description>gateway-service</description>
    <properties>
        <spring-cloud.version>2025.0.0</spring-cloud.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>dev.edu.ngochandev</groupId>
            <artifactId>common-lib</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-gateway-server-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>

================
File: services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/commons/GatewayConstants.java
================
package dev.edu.ngochandev.gatewayservice.commons;

public final class GatewayConstants {
    public static final String INTROSPECTION_RESULT_ATTRIBUTE = "introspectionResult";
}

================
File: services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/commons/Translator.java
================
package dev.edu.ngochandev.gatewayservice.commons;

import lombok.RequiredArgsConstructor;
import org.springframework.context.MessageSource;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.server.ServerWebExchange;

import java.util.List;
import java.util.Locale;

@Component
@RequiredArgsConstructor

public class Translator {
    private final MessageSource messageSource;
    public String translate(ServerWebExchange exchange, String code) {
        Locale locale = resolveLocale(exchange);

        return messageSource.getMessage(code, null, code, locale);
    }
    private Locale resolveLocale(ServerWebExchange exchange) {
        List<String> langHeaders = exchange.getRequest().getHeaders().get(HttpHeaders.ACCEPT_LANGUAGE);

        if (CollectionUtils.isEmpty(langHeaders) || !StringUtils.hasText(langHeaders.get(0))) {
            return Locale.getDefault();
        }

        List<Locale.LanguageRange> ranges = Locale.LanguageRange.parse(langHeaders.get(0));
        if (ranges.isEmpty()) {
            return Locale.getDefault();
        }

        return Locale.forLanguageTag(ranges.get(0).getRange());
    }
}

================
File: services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/configs/AuthenticationFilter.java
================
package dev.edu.ngochandev.gatewayservice.configs;

import com.fasterxml.jackson.databind.ObjectMapper;
import dev.edu.ngochandev.common.dtos.res.ErrorResponseDto;
import dev.edu.ngochandev.common.dtos.res.IntrospectTokenResponseDto;
import dev.edu.ngochandev.gatewayservice.commons.GatewayConstants;
import dev.edu.ngochandev.gatewayservice.commons.Translator;
import dev.edu.ngochandev.gatewayservice.services.AuthService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.util.List;

@Component
@Slf4j
@RequiredArgsConstructor
public class AuthenticationFilter implements GlobalFilter, Ordered {
    private final AuthService authService;
    private final ObjectMapper mapper;
    private final SecurityProperties securityProperties;
    private final Translator translator;
    @Value("${app.security.internal-secret-key}")
    private String internalSecretKey;


    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        if(isPublicEndpoint(exchange.getRequest())){
            return chain.filter(exchange);
        }

        //get token from the request header
        List<String> bearerToken = exchange.getRequest().getHeaders().get(HttpHeaders.AUTHORIZATION);
        if(CollectionUtils.isEmpty(bearerToken) || !bearerToken.get(0).startsWith("Bearer ")) {
            return handleUnauthorized(exchange, "error.token.invalid");
        }
        //verify token
        String token = bearerToken.get(0).replace("Bearer ", "");
        return authService.verifyToken(token)
                .flatMap(res->{
                    if(!res.getData().isActive()){
                        return handleUnauthorized(exchange, "error.unauthorized");
                    }else {
                        IntrospectTokenResponseDto introspectToken = res.getData();
                        ServerHttpRequest modifiReq = exchange.getRequest()
                                .mutate()
                                .header("X-User-Id", String.valueOf(introspectToken.getUserId()))
                                .header("X-User-Roles", String.join(",", introspectToken.getRoles()))
                                .header("X-Internal-Secret", internalSecretKey)
                                .build();

                        ServerWebExchange modifiedExchange = exchange.mutate().request(modifiReq).build();
                        modifiedExchange.getAttributes().put(GatewayConstants.INTROSPECTION_RESULT_ATTRIBUTE, introspectToken);

                        return chain.filter(modifiedExchange);
                    }
                })
                .onErrorResume(throwable -> handleUnauthorized(exchange, "error.unauthorized"));
    }

    @Override
    public int getOrder() {
        return -2;
    }

    Mono<Void> handleUnauthorized(ServerWebExchange exchange, String messageCode) {
        ServerHttpResponse res = exchange.getResponse();
        ServerHttpRequest req = exchange.getRequest();
        String path = req.getURI().getPath();

        ErrorResponseDto error = new ErrorResponseDto(HttpStatus.UNAUTHORIZED, translator.translate(exchange,messageCode ), null);
        error.setPath(path);
        try {
            String errorResponse = mapper.writeValueAsString(error);
            res.getHeaders().add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);
            return res.writeWith(Mono.just(res.bufferFactory().wrap(errorResponse.getBytes())));
        } catch (Exception e) {
            log.error("Error serializing error response", e);
        }
        return res.writeWith(Mono.just(res.bufferFactory().wrap("Unauthorized".getBytes())));
    }

    public boolean isPublicEndpoint(ServerHttpRequest req){
        return securityProperties.getPublicEndpoints().stream()
                .anyMatch(endpoint -> req.getURI().getPath().matches(endpoint));
    }
}

================
File: services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/configs/AuthorizationFilter.java
================
package dev.edu.ngochandev.gatewayservice.configs;

import com.fasterxml.jackson.databind.ObjectMapper;
import dev.edu.ngochandev.common.dtos.res.ErrorResponseDto;
import dev.edu.ngochandev.common.dtos.res.IntrospectTokenResponseDto;
import dev.edu.ngochandev.gatewayservice.commons.GatewayConstants;
import dev.edu.ngochandev.gatewayservice.commons.Translator;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.util.AntPathMatcher;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.util.Set;

@Component
@Slf4j
@RequiredArgsConstructor
public class AuthorizationFilter implements GlobalFilter, Ordered {
    private final ObjectMapper objMapper;
    private final AntPathMatcher antPathMatcher;
    private final SecurityProperties securityProperties;
    private final Translator translator;

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        if(isPublicEndpoint(exchange.getRequest())){
            return chain.filter(exchange);
        }

        IntrospectTokenResponseDto introspectToken = exchange.getAttribute(GatewayConstants.INTROSPECTION_RESULT_ATTRIBUTE);
        if(introspectToken == null || !introspectToken.isActive()) {
            return handleAccessDenied(exchange, "error.access.denied");
        }
        String requestURI = exchange.getRequest().getURI().getPath();
        String requestMethod = exchange.getRequest().getMethod().name();
        if(!hasPermission(introspectToken, requestURI, requestMethod)) {
            return handleAccessDenied(exchange, "error.access.denied");
        }
        return chain.filter(exchange);
    }

    public boolean isPublicEndpoint(ServerHttpRequest req){
        return securityProperties.getPublicEndpoints().stream()
                .anyMatch(endpoint -> req.getURI().getPath().matches(endpoint));
    }

    private boolean hasPermission(IntrospectTokenResponseDto introspectToken, String requestURI, String requestMethod) {
        Set<String> permissions = introspectToken.getPermissions();
        return permissions.stream()
                .anyMatch(p -> {
                    String[] parts = p.split(":");
                    String method = parts[0];
                    String path = parts[1];

                    return antPathMatcher.match(path, requestURI) && method.equalsIgnoreCase(requestMethod);
                });
    }

    private Mono<Void> handleAccessDenied(ServerWebExchange exchange, String messageCode) {
        ServerHttpResponse res = exchange.getResponse();
        ServerHttpRequest req = exchange.getRequest();
        String path = req.getURI().getPath();

        ErrorResponseDto error = new ErrorResponseDto(HttpStatus.FORBIDDEN, translator.translate(exchange, messageCode), null);
        error.setPath(path);

        try{
            String errorResponse = objMapper.writeValueAsString(error);
            res.setStatusCode(HttpStatus.FORBIDDEN);
            res.getHeaders().setContentType(MediaType.APPLICATION_JSON);
            return res.writeWith(Mono.just(res.bufferFactory().wrap(errorResponse.getBytes())));
        }catch (Exception e){
            log.error("Error while writing error response: {}", e.getMessage());
        }
        return res.writeWith(Mono.just(res.bufferFactory().wrap("Access Denied".getBytes())));
    }

    @Override
    public int getOrder() {
        return -1;
    }
}

================
File: services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/configs/BeanStorage.java
================
package dev.edu.ngochandev.gatewayservice.configs;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.util.AntPathMatcher;

@Configuration
public class BeanStorage {
    @Bean
    public AntPathMatcher antPathMatcher() {
        return new AntPathMatcher();
    }
    @Bean
    public ResourceBundleMessageSource messageSource() {
        ResourceBundleMessageSource source = new ResourceBundleMessageSource();
        source.setBasenames("messages_gateway", "messages_common");
        source.setDefaultEncoding("UTF-8");
        return source;
    }
}

================
File: services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/configs/SecurityProperties.java
================
package dev.edu.ngochandev.gatewayservice.configs;

import jakarta.validation.constraints.NotEmpty;
import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;

import java.util.ArrayList;
import java.util.List;

@Component
@ConfigurationProperties(prefix = "app.security")
@Getter
@Setter
@Validated
public class SecurityProperties {
    @NotEmpty
    private List<String> publicEndpoints = new ArrayList<>();
}

================
File: services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/configs/WebClientConfig.java
================
package dev.edu.ngochandev.gatewayservice.configs;

import dev.edu.ngochandev.gatewayservice.repositories.AuthClient;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.support.WebClientAdapter;
import org.springframework.web.service.invoker.HttpServiceProxyFactory;

@Configuration
public class WebClientConfig {
    @Value("${app.security.internal-secret-key}")
    private String internalSecretKey;

    @Bean
    WebClient webClient() {
        return WebClient.builder()
                .baseUrl("http://localhost:8080")
                .defaultHeader("X-Internal-Secret", internalSecretKey)
                .build();
    }

    @Bean
    AuthClient authClient() {
        HttpServiceProxyFactory factory = HttpServiceProxyFactory
                .builder()
                .exchangeAdapter(WebClientAdapter.create(webClient()))
                .build();
        return factory.createClient(AuthClient.class);
    }
}

================
File: services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/dtos/req/AuthVerifyTokenRequestDto.java
================
package dev.edu.ngochandev.gatewayservice.dtos.req;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class AuthVerifyTokenRequestDto {
    @NotBlank(message = "error.token.not-blank")
    private String token;
}

================
File: services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/GatewayServiceApplication.java
================
package dev.edu.ngochandev.gatewayservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class GatewayServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(GatewayServiceApplication.class, args);
    }

}

================
File: services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/repositories/AuthClient.java
================
package dev.edu.ngochandev.gatewayservice.repositories;

import dev.edu.ngochandev.common.dtos.res.IntrospectTokenResponseDto;
import dev.edu.ngochandev.common.dtos.res.SuccessResponseDto;
import dev.edu.ngochandev.gatewayservice.dtos.req.AuthVerifyTokenRequestDto;
import jakarta.validation.Valid;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.service.annotation.PostExchange;
import reactor.core.publisher.Mono;

public interface AuthClient {

    @PostExchange(value = "/api/auth/internal/verify-token", contentType = MediaType.APPLICATION_JSON_VALUE)
    Mono<SuccessResponseDto<IntrospectTokenResponseDto>> verifyToken(@RequestBody @Valid AuthVerifyTokenRequestDto req);
}

================
File: services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/services/AuthService.java
================
package dev.edu.ngochandev.gatewayservice.services;

import dev.edu.ngochandev.common.dtos.res.IntrospectTokenResponseDto;
import dev.edu.ngochandev.common.dtos.res.SuccessResponseDto;
import reactor.core.publisher.Mono;

public interface AuthService {
    Mono<SuccessResponseDto<IntrospectTokenResponseDto>> verifyToken(String token);
}

================
File: services/gateway-service/src/main/java/dev/edu/ngochandev/gatewayservice/services/impl/AuthServiceImpl.java
================
package dev.edu.ngochandev.gatewayservice.services.impl;

import dev.edu.ngochandev.common.dtos.res.IntrospectTokenResponseDto;
import dev.edu.ngochandev.common.dtos.res.SuccessResponseDto;
import dev.edu.ngochandev.gatewayservice.dtos.req.AuthVerifyTokenRequestDto;
import dev.edu.ngochandev.gatewayservice.repositories.AuthClient;
import dev.edu.ngochandev.gatewayservice.services.AuthService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;


@Slf4j
@Service
@RequiredArgsConstructor
public class AuthServiceImpl implements AuthService {
    private final AuthClient authClient;
    @Override
    public Mono<SuccessResponseDto<IntrospectTokenResponseDto>> verifyToken(String token) {
        AuthVerifyTokenRequestDto req = new AuthVerifyTokenRequestDto();
        req.setToken(token);
        return authClient.verifyToken(req);
    }
}

================
File: services/gateway-service/src/main/resources/application.yml
================
spring:
  application:
    name: gateway-service

  cloud:
    gateway:
      server:
        webflux:
          routes:
            - id: auth-service
              uri: http://localhost:8080
              predicates:
                - Path=/api/auth/**, /api/v1/users/**, /api/v1/roles/**, /api/v1/permissions/**, /swagger-ui/**, /v3/api-docs/auth-service/**
            - id: social-service
              uri: http://localhost:8081
              predicates:
                - Path=/api/v1/user-profile/**

server:
  port: 8888

app:
  security:
    internal-secret-key: ${INTERNAL_SECRET_KEY}
    public-endpoints:
      - /api/auth/register
      - /api/auth/authenticate
      - /api/auth/reset-password
      - /api/auth/forgot-password
      - /api/auth/verify-email
      - /swagger-ui/.*
      - /v3/api-docs/.*
      - /api/auth/verify-token

================
File: services/gateway-service/src/main/resources/messages_gateway_vi.properties
================
error.unauthorized=Truy cập không hợp lệ. Vui lòng kiểm tra lại thông tin.
error.forbidden=Truy cập bị từ chối. Bạn không có quyền truy cập vào tài nguyên này.
error.introspection_failed=Xác thực token thất bại. Dịch vụ xác thực có thể đang gặp sự cố.
error.missing_header=Header Authorization bị thiếu hoặc không hợp lệ.

================
File: services/gateway-service/src/main/resources/messages_gateway.properties
================
error.unauthorized=Unauthorized access. Please check your credentials.
error.forbidden=Access Denied. You do not have permission to access this resource.
error.introspection_failed=Token introspection failed. The authentication service may be down.
error.missing_header=Authorization header is missing or invalid.

================
File: services/gateway-service/src/test/java/dev/edu/ngochandev/gatewayservice/GatewayServiceApplicationTests.java
================
package dev.edu.ngochandev.gatewayservice;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class GatewayServiceApplicationTests {

    @Test
    void contextLoads() {
    }

}

================
File: services/social-service/.gitattributes
================
/mvnw text eol=lf
*.cmd text eol=crlf

================
File: services/social-service/.gitignore
================
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

================
File: services/social-service/.mvn/wrapper/maven-wrapper.properties
================
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.11/apache-maven-3.9.11-bin.zip

================
File: services/social-service/mvnw
================
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

================
File: services/social-service/mvnw.cmd
================
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

================
File: services/social-service/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>dev.edu.ngochandev</groupId>
        <artifactId>elearning-platform</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>./../../pom.xml</relativePath>
    </parent>
    <artifactId>social-service</artifactId>
    <name>social-service</name>
    <description>social-service</description>
    <dependencies>
        <dependency>
            <groupId>dev.edu.ngochandev</groupId>
            <artifactId>common-lib</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-neo4j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
        <!--        Maptruct-->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
        </plugins>
    </build>

</project>

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/commons/enums/ConnectionStatus.java
================
package dev.edu.ngochandev.socialservice.commons.enums;

public enum ConnectionStatus {
    PENDING,
    ACCEPTED,
    REJECTED,
    BLOCKED,
    CANCELED}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/commons/enums/Gender.java
================
package dev.edu.ngochandev.socialservice.commons.enums;

public enum Gender {
    MALE, FEMALE, OTHER
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/config/InternalApiAuthFilter.java
================
package dev.edu.ngochandev.socialservice.config;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class InternalApiAuthFilter extends OncePerRequestFilter {
    @Value("${app.security.internal-secret-key}")
    private String expectedSecret;
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        String actualSecret = request.getHeader("X-Internal-Secret");
        String userIdStr = request.getHeader("X-User-Id");
        if (!StringUtils.hasLength(actualSecret) || !StringUtils.hasLength(userIdStr) || !actualSecret.equals(expectedSecret)) {
            response.sendError(HttpStatus.FORBIDDEN.value(), "Access Denied: Invalid or missing internal secret.");
            return;
        }
        Long userId = Long.valueOf(userIdStr);

        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userId, null,null);
        SecurityContextHolder.getContext().setAuthentication(authentication);

        filterChain.doFilter(request, response);
    }
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/config/LocalResolver.java
================
package dev.edu.ngochandev.socialservice.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;

@Configuration
public class LocalResolver extends AcceptHeaderLocaleResolver implements WebMvcConfigurer {
    @Bean
    public ResourceBundleMessageSource messageSource() {
        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
        messageSource.setBasenames("messages_social", "messages_common");
        messageSource.setDefaultEncoding("UTF-8");
        messageSource.setCacheSeconds(3600);
        return messageSource;
    }
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/config/SecurityConfig.java
================
package dev.edu.ngochandev.socialservice.config;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.access.intercept.AuthorizationFilter;

@Configuration
@RequiredArgsConstructor
public class SecurityConfig {
    private final InternalApiAuthFilter  internalApiAuthFilter;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .csrf(AbstractHttpConfigurer::disable)
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authorizeHttpRequests(auth -> auth.anyRequest().permitAll())
                .addFilterBefore(internalApiAuthFilter, AuthorizationFilter.class);
        return http.build();
    }
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/controllers/UserProfileController.java
================
package dev.edu.ngochandev.socialservice.controllers;

import dev.edu.ngochandev.common.dtos.res.SuccessResponseDto;
import dev.edu.ngochandev.common.i18n.Translator;
import dev.edu.ngochandev.socialservice.dtos.req.UserProfileUpdateRequestDto;
import dev.edu.ngochandev.socialservice.dtos.res.UserProfileResponseDto;
import dev.edu.ngochandev.socialservice.services.UserProfileService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/user-profile")
@RequiredArgsConstructor
public class UserProfileController {
    private final UserProfileService userProfileService;
    private final Translator translator;
    @PatchMapping()
    @ResponseStatus(HttpStatus.OK)
    public SuccessResponseDto<UserProfileResponseDto> updateProfile(@RequestBody @Valid UserProfileUpdateRequestDto req, @AuthenticationPrincipal Long userId) {
        return SuccessResponseDto.<UserProfileResponseDto>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.profile.update.success"))
                .data(userProfileService.updateProfile(req, userId))
                .build();
    }

    @GetMapping("/me")
    @ResponseStatus(HttpStatus.OK)
    public SuccessResponseDto<UserProfileResponseDto> getMyProfile(@AuthenticationPrincipal Long userId) {
        return SuccessResponseDto.<UserProfileResponseDto>builder()
                .status(HttpStatus.OK.value())
                .message(translator.translate("user.profile.get-me.success"))
                .data(userProfileService.getMe(userId))
                .build();
    }
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/dtos/req/UserProfileUpdateRequestDto.java
================
package dev.edu.ngochandev.socialservice.dtos.req;

import com.fasterxml.jackson.annotation.JsonFormat;
import jakarta.validation.constraints.NotBlank;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDate;
import java.util.Map;

@Getter
@Setter
@Builder
public class UserProfileUpdateRequestDto {
    private String fullName;
    private String avatar;
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd/MM/yyyy")
    private LocalDate dateOfBirth;
    private String phoneNumber;
    private String school;
    private Map<String, String> socialMediaLinks;
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/dtos/res/UserProfileResponseDto.java
================
package dev.edu.ngochandev.socialservice.dtos.res;

import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDate;
import java.util.Map;

@Getter
@Setter
@Builder
public class UserProfileResponseDto {
    private String profileId;
    private Long userId;
    private String fullName;
    private String avatar;
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd/MM/yyyy")
    private LocalDate dateOfBirth;
    private String phoneNumber;
    private String school;
    private Map<String, String> socialMediaLinks;
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/entities/BaseNodeEntity.java
================
package dev.edu.ngochandev.socialservice.entities;

import lombok.Getter;
import lombok.Setter;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.neo4j.core.schema.GeneratedValue;
import org.springframework.data.neo4j.core.schema.Property;
import org.springframework.data.neo4j.core.support.UUIDStringGenerator;

import java.time.LocalDateTime;

@Getter
@Setter
public abstract class BaseNodeEntity {
    @Id
    @GeneratedValue(generatorClass = UUIDStringGenerator.class)
    @Property("id")
    private String id;

    @CreatedDate
    @Property("created_at")
    private LocalDateTime createdAt;

    @LastModifiedDate
    @Property("updated_at")
    private LocalDateTime updatedAt;
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/entities/ConnectionRelation.java
================
package dev.edu.ngochandev.socialservice.entities;

import dev.edu.ngochandev.socialservice.commons.enums.ConnectionStatus;
import lombok.Getter;
import lombok.Setter;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.neo4j.core.schema.Property;
import org.springframework.data.neo4j.core.schema.RelationshipId;
import org.springframework.data.neo4j.core.schema.RelationshipProperties;
import org.springframework.data.neo4j.core.schema.TargetNode;

import java.time.LocalDateTime;

@RelationshipProperties
@Getter
@Setter
public class ConnectionRelation {
    @RelationshipId
    private Long id;

    @Property("initiator_user_id")
    private Long initiatorUserId;

    @TargetNode
    private UserProfileEntity targetUser;

    @Property("status")
    private ConnectionStatus status;

    @CreatedDate
    @Property("created_at")
    private LocalDateTime createdAt;

    @LastModifiedDate
    @Property("updated_at")
    private LocalDateTime updatedAt;

}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/entities/UserProfileEntity.java
================
package dev.edu.ngochandev.socialservice.entities;

import lombok.Getter;
import lombok.Setter;
import org.springframework.data.neo4j.core.schema.Node;
import org.springframework.data.neo4j.core.schema.Property;
import org.springframework.data.neo4j.core.schema.Relationship;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

@Node("UserProfile")
@Getter
@Setter
public class UserProfileEntity extends BaseNodeEntity{
    @Property("user_id")
    private Long userId;

    @Property("full_name")
    private String fullName;

    @Property("avatar")
    private String avatar;

    @Property("date_of_birth")
    private LocalDate dateOfBirth;

    @Property("phone_number")
    private String phoneNumber;

    @Property("school")
    private String school;

    @Property("social_media_links")
    private String socialMediaLinks;

    @Relationship(type = "CONNECTION", direction = Relationship.Direction.OUTGOING)
    private Set<ConnectionRelation> connections = new HashSet<>();
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/exceptions/GlobalExceptionHandler.java
================
package dev.edu.ngochandev.socialservice.exceptions;

import dev.edu.ngochandev.common.dtos.res.ErrorResponseDto;
import dev.edu.ngochandev.common.i18n.Translator;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;

@RestControllerAdvice
@RequiredArgsConstructor
public class GlobalExceptionHandler {
    private final Translator translator;

    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public ErrorResponseDto handleGlobalException(Exception ex, WebRequest req) {
        String message = ex.getMessage() != null ? ex.getMessage() : "An unexpected error occurred";
        return new ErrorResponseDto(HttpStatus.INTERNAL_SERVER_ERROR, message, req);
    }
    @ExceptionHandler({MethodArgumentNotValidException.class})
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ErrorResponseDto handleValidationExceptions(MethodArgumentNotValidException ex, WebRequest req) {
        ErrorResponseDto res =
                new ErrorResponseDto(HttpStatus.BAD_REQUEST, translator.translate("error.body.invalid"), req);
        if (ex.getBindingResult().hasErrors()) {
            ex.getBindingResult().getFieldErrors().forEach(fieldError -> {
                String message = fieldError.getDefaultMessage();
                res.addValidationError(fieldError.getField(), translator.translate(message));
            });
        }
        return res;
    }
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/kafka/consumers/UserEventConsumer.java
================
package dev.edu.ngochandev.socialservice.kafka.consumers;


import dev.edu.ngochandev.common.events.UserRegisteredEvent;
import dev.edu.ngochandev.socialservice.entities.UserProfileEntity;
import dev.edu.ngochandev.socialservice.mappers.UserProfileMapper;
import dev.edu.ngochandev.socialservice.repositories.UserProfileRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
@Slf4j(topic = "USER-EVENT-CONSUMER")
public class UserEventConsumer {
    private final UserProfileRepository userProfileRepository;
    private final UserProfileMapper userProfileMapper;

    @KafkaListener(topics = "user-registered-topic")
    public void consumeUserRegisteredEvent(UserRegisteredEvent event){
        log.info("Received user registered event: {}", event);
        try {
            if(userProfileRepository.existsByUserId(event.getUserId())) {
                log.warn("User profile already exists for user ID: {}", event.getUserId());
                return;
            }
            // Create a new user profile entity
            UserProfileEntity userProfile = userProfileMapper.toEntity(event);

            userProfileRepository.save(userProfile);
            log.info("User profile created for user ID: {}", event.getUserId());
        } catch (Exception e) {
            log.error("Failed to create user profile for user ID: {}. Error: {}", event.getUserId(), e.getMessage());
        }
    }
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/mappers/UserProfileMapper.java
================
package dev.edu.ngochandev.socialservice.mappers;

import dev.edu.ngochandev.common.events.UserRegisteredEvent;
import dev.edu.ngochandev.socialservice.dtos.res.UserProfileResponseDto;
import dev.edu.ngochandev.socialservice.entities.UserProfileEntity;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

@Mapper(componentModel = "spring")
public interface UserProfileMapper {
     UserProfileEntity toEntity(UserRegisteredEvent event);

     @Mapping(source = "id", target = "profileId")
     @Mapping(target = "socialMediaLinks", ignore = true)
     UserProfileResponseDto toDto(UserProfileEntity entity);
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/repositories/UserProfileRepository.java
================
package dev.edu.ngochandev.socialservice.repositories;

import dev.edu.ngochandev.socialservice.entities.UserProfileEntity;
import org.springframework.data.neo4j.repository.Neo4jRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserProfileRepository extends Neo4jRepository<UserProfileEntity, String> {
    boolean existsByUserId(Long userId);
    UserProfileEntity findByUserId(Long userId);
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/services/impl/UserProfileServiceImpl.java
================
package dev.edu.ngochandev.socialservice.services.impl;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import dev.edu.ngochandev.socialservice.dtos.req.UserProfileUpdateRequestDto;
import dev.edu.ngochandev.socialservice.dtos.res.UserProfileResponseDto;
import dev.edu.ngochandev.socialservice.entities.UserProfileEntity;
import dev.edu.ngochandev.socialservice.mappers.UserProfileMapper;
import dev.edu.ngochandev.socialservice.repositories.UserProfileRepository;
import dev.edu.ngochandev.socialservice.services.UserProfileService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.Map;

@Service
@RequiredArgsConstructor
@Slf4j
public class UserProfileServiceImpl implements UserProfileService {
    private final UserProfileRepository userProfileRepository;
    private final UserProfileMapper userProfileMapper;
    private final ObjectMapper objectMapper;
    @Override
    public UserProfileResponseDto updateProfile(UserProfileUpdateRequestDto req, Long userId) {
        UserProfileEntity userProfile = userProfileRepository.findByUserId(userId);
        userProfile.setAvatar(req.getAvatar() != null ? req.getAvatar() : userProfile.getAvatar());
        userProfile.setDateOfBirth(req.getDateOfBirth() != null ? req.getDateOfBirth() : userProfile.getDateOfBirth());
        userProfile.setFullName(req.getFullName() != null ? req.getFullName() : userProfile.getFullName());
        userProfile.setPhoneNumber(req.getPhoneNumber() != null ? req.getPhoneNumber() : userProfile.getPhoneNumber());
        userProfile.setSchool(req.getSchool() != null ? req.getSchool() : userProfile.getSchool());
        try{
            if (req.getSocialMediaLinks() != null) {
                String socialMediaLinksJson = objectMapper.writeValueAsString(req.getSocialMediaLinks());
                userProfile.setSocialMediaLinks(socialMediaLinksJson);
            }
        }catch (Exception e){
            log.error("Error while updating user profile: {}", e.getMessage());
            throw new RuntimeException("Failed to update user profile");
        }
        userProfile = userProfileRepository.save(userProfile);

        UserProfileResponseDto res = userProfileMapper.toDto(userProfile);
        res.setSocialMediaLinks(req.getSocialMediaLinks());
        return res;
    }

    @Override
    public UserProfileResponseDto getMe(Long userId) {
        UserProfileEntity userProfile = userProfileRepository.findByUserId(userId);
        UserProfileResponseDto dto = userProfileMapper.toDto(userProfile);
        try {
            if (userProfile.getSocialMediaLinks() != null) {
                Map<String, String> links = objectMapper.readValue(
                        userProfile.getSocialMediaLinks(),
                        new TypeReference<>() {}
                );
                dto.setSocialMediaLinks(links);
            }
        } catch (JsonProcessingException e) {
            log.error("Error deserializing social media links", e);
        }

        return dto;
    }
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/services/UserProfileService.java
================
package dev.edu.ngochandev.socialservice.services;

import dev.edu.ngochandev.socialservice.dtos.req.UserProfileUpdateRequestDto;
import dev.edu.ngochandev.socialservice.dtos.res.UserProfileResponseDto;

public interface UserProfileService
{
    UserProfileResponseDto updateProfile(UserProfileUpdateRequestDto req, Long userId);

    UserProfileResponseDto getMe(Long userId);
}

================
File: services/social-service/src/main/java/dev/edu/ngochandev/socialservice/SocialServiceApplication.java
================
package dev.edu.ngochandev.socialservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.data.neo4j.config.EnableNeo4jAuditing;

@SpringBootApplication
@EnableNeo4jAuditing
@ComponentScan(basePackages = {"dev.edu.ngochandev.socialservice", "dev.edu.ngochandev.common.i18n"})
public class SocialServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(SocialServiceApplication.class, args);
    }

}

================
File: services/social-service/src/main/resources/application.yml
================
spring:
  application:
    name: social-service
  neo4j:
    uri: bolt://localhost:7687
    authentication:
      username: neo4j
      password: ${NEO4J_PASSWORD}
  kafka:
    bootstrap-servers: localhost:9094
    consumer:
      group-id: social-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "dev.edu.ngochandev.common.events.*"
        spring.json.use.type.headers: false
        spring.json.value.default.type: dev.edu.ngochandev.common.events.UserRegisteredEvent
server:
  port: 8081

openapi:
  service:
    api-docs: social-service
    server: http://localhost:${server.port}
    title: Social Service
    version: 1.0.0


app:
  security:
    internal-secret-key: ${INTERNAL_SECRET_KEY}

================
File: services/social-service/src/main/resources/messages_social_vi.properties
================
user.profile.get-me.success=Lấy thông tin người dùng thành công
user.profile.update.success=Cập nhật thông tin người dùng thành công

#Errors
error.date.invalid-format=Định dạng ngày có dạng: dd/MM/yyyy

================
File: services/social-service/src/main/resources/messages_social.properties
================
user.profile.get-me.success=Get user profile successfully
user.profile.update.success=Update user profile successfully
#Errors
error.date.invalid-format=Date format must be dd/MM/yyyy

================
File: services/social-service/src/test/java/dev/edu/ngochandev/socialservice/SocialServiceApplicationTests.java
================
package dev.edu.ngochandev.socialservice;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class SocialServiceApplicationTests {

    @Test
    void contextLoads() {
    }

}



================================================================
End of Codebase
================================================================
